// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nexus
{
    public static class GetNexusRepositoryDockerProxy
    {
        public static Task<GetNexusRepositoryDockerProxyResult> InvokeAsync(GetNexusRepositoryDockerProxyArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNexusRepositoryDockerProxyResult>("nexus:index/getNexusRepositoryDockerProxy:GetNexusRepositoryDockerProxy", args ?? new GetNexusRepositoryDockerProxyArgs(), options.WithDefaults());

        public static Output<GetNexusRepositoryDockerProxyResult> Invoke(GetNexusRepositoryDockerProxyInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetNexusRepositoryDockerProxyResult>("nexus:index/getNexusRepositoryDockerProxy:GetNexusRepositoryDockerProxy", args ?? new GetNexusRepositoryDockerProxyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNexusRepositoryDockerProxyArgs : Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetNexusRepositoryDockerProxyArgs()
        {
        }
    }

    public sealed class GetNexusRepositoryDockerProxyInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetNexusRepositoryDockerProxyInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetNexusRepositoryDockerProxyResult
    {
        public readonly ImmutableArray<Outputs.GetNexusRepositoryDockerProxyCleanupResult> Cleanups;
        public readonly ImmutableArray<Outputs.GetNexusRepositoryDockerProxyDockerProxyResult> DockerProxies;
        public readonly ImmutableArray<Outputs.GetNexusRepositoryDockerProxyDockerResult> Dockers;
        public readonly ImmutableArray<Outputs.GetNexusRepositoryDockerProxyHttpClientResult> HttpClients;
        public readonly string Id;
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetNexusRepositoryDockerProxyNegativeCachResult> NegativeCaches;
        public readonly bool Online;
        public readonly ImmutableArray<Outputs.GetNexusRepositoryDockerProxyProxyResult> Proxies;
        public readonly string RoutingRule;
        public readonly ImmutableArray<Outputs.GetNexusRepositoryDockerProxyStorageResult> Storages;

        [OutputConstructor]
        private GetNexusRepositoryDockerProxyResult(
            ImmutableArray<Outputs.GetNexusRepositoryDockerProxyCleanupResult> cleanups,

            ImmutableArray<Outputs.GetNexusRepositoryDockerProxyDockerProxyResult> dockerProxies,

            ImmutableArray<Outputs.GetNexusRepositoryDockerProxyDockerResult> dockers,

            ImmutableArray<Outputs.GetNexusRepositoryDockerProxyHttpClientResult> httpClients,

            string id,

            string name,

            ImmutableArray<Outputs.GetNexusRepositoryDockerProxyNegativeCachResult> negativeCaches,

            bool online,

            ImmutableArray<Outputs.GetNexusRepositoryDockerProxyProxyResult> proxies,

            string routingRule,

            ImmutableArray<Outputs.GetNexusRepositoryDockerProxyStorageResult> storages)
        {
            Cleanups = cleanups;
            DockerProxies = dockerProxies;
            Dockers = dockers;
            HttpClients = httpClients;
            Id = id;
            Name = name;
            NegativeCaches = negativeCaches;
            Online = online;
            Proxies = proxies;
            RoutingRule = routingRule;
            Storages = storages;
        }
    }
}
