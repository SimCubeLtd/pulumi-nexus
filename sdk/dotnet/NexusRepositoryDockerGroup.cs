// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nexus
{
    [NexusResourceType("nexus:index/nexusRepositoryDockerGroup:NexusRepositoryDockerGroup")]
    public partial class NexusRepositoryDockerGroup : Pulumi.CustomResource
    {
        /// <summary>
        /// docker contains the configuration of the docker repository
        /// </summary>
        [Output("docker")]
        public Output<Outputs.NexusRepositoryDockerGroupDocker> Docker { get; private set; } = null!;

        /// <summary>
        /// Configuration for repository group
        /// </summary>
        [Output("group")]
        public Output<Outputs.NexusRepositoryDockerGroupGroup> Group { get; private set; } = null!;

        /// <summary>
        /// A unique identifier for this repository
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Whether this repository accepts incoming requests
        /// </summary>
        [Output("online")]
        public Output<bool?> Online { get; private set; } = null!;

        /// <summary>
        /// The storage configuration of the repository
        /// </summary>
        [Output("storage")]
        public Output<Outputs.NexusRepositoryDockerGroupStorage> Storage { get; private set; } = null!;


        /// <summary>
        /// Create a NexusRepositoryDockerGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NexusRepositoryDockerGroup(string name, NexusRepositoryDockerGroupArgs args, CustomResourceOptions? options = null)
            : base("nexus:index/nexusRepositoryDockerGroup:NexusRepositoryDockerGroup", name, args ?? new NexusRepositoryDockerGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NexusRepositoryDockerGroup(string name, Input<string> id, NexusRepositoryDockerGroupState? state = null, CustomResourceOptions? options = null)
            : base("nexus:index/nexusRepositoryDockerGroup:NexusRepositoryDockerGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/SimCubeLtd/pulumi-nexus/releases/download/v${VERSION}",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NexusRepositoryDockerGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NexusRepositoryDockerGroup Get(string name, Input<string> id, NexusRepositoryDockerGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new NexusRepositoryDockerGroup(name, id, state, options);
        }
    }

    public sealed class NexusRepositoryDockerGroupArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// docker contains the configuration of the docker repository
        /// </summary>
        [Input("docker", required: true)]
        public Input<Inputs.NexusRepositoryDockerGroupDockerArgs> Docker { get; set; } = null!;

        /// <summary>
        /// Configuration for repository group
        /// </summary>
        [Input("group", required: true)]
        public Input<Inputs.NexusRepositoryDockerGroupGroupArgs> Group { get; set; } = null!;

        /// <summary>
        /// A unique identifier for this repository
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether this repository accepts incoming requests
        /// </summary>
        [Input("online")]
        public Input<bool>? Online { get; set; }

        /// <summary>
        /// The storage configuration of the repository
        /// </summary>
        [Input("storage", required: true)]
        public Input<Inputs.NexusRepositoryDockerGroupStorageArgs> Storage { get; set; } = null!;

        public NexusRepositoryDockerGroupArgs()
        {
        }
    }

    public sealed class NexusRepositoryDockerGroupState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// docker contains the configuration of the docker repository
        /// </summary>
        [Input("docker")]
        public Input<Inputs.NexusRepositoryDockerGroupDockerGetArgs>? Docker { get; set; }

        /// <summary>
        /// Configuration for repository group
        /// </summary>
        [Input("group")]
        public Input<Inputs.NexusRepositoryDockerGroupGroupGetArgs>? Group { get; set; }

        /// <summary>
        /// A unique identifier for this repository
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether this repository accepts incoming requests
        /// </summary>
        [Input("online")]
        public Input<bool>? Online { get; set; }

        /// <summary>
        /// The storage configuration of the repository
        /// </summary>
        [Input("storage")]
        public Input<Inputs.NexusRepositoryDockerGroupStorageGetArgs>? Storage { get; set; }

        public NexusRepositoryDockerGroupState()
        {
        }
    }
}
