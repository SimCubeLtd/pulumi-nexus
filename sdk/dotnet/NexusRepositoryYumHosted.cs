// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nexus
{
    [NexusResourceType("nexus:index/nexusRepositoryYumHosted:NexusRepositoryYumHosted")]
    public partial class NexusRepositoryYumHosted : Pulumi.CustomResource
    {
        /// <summary>
        /// Cleanup policies
        /// </summary>
        [Output("cleanups")]
        public Output<ImmutableArray<Outputs.NexusRepositoryYumHostedCleanup>> Cleanups { get; private set; } = null!;

        /// <summary>
        /// Component configuration for the hosted repository
        /// </summary>
        [Output("component")]
        public Output<Outputs.NexusRepositoryYumHostedComponent> Component { get; private set; } = null!;

        /// <summary>
        /// Validate that all paths are RPMs or yum metadata. Possible values: `STRICT` or `PERMISSIVE`
        /// </summary>
        [Output("deployPolicy")]
        public Output<string?> DeployPolicy { get; private set; } = null!;

        /// <summary>
        /// A unique identifier for this repository
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Whether this repository accepts incoming requests
        /// </summary>
        [Output("online")]
        public Output<bool?> Online { get; private set; } = null!;

        /// <summary>
        /// Specifies the repository depth where repodata folder(s) are created. Possible values: 0-5
        /// </summary>
        [Output("repodataDepth")]
        public Output<int?> RepodataDepth { get; private set; } = null!;

        /// <summary>
        /// The storage configuration of the repository
        /// </summary>
        [Output("storage")]
        public Output<Outputs.NexusRepositoryYumHostedStorage> Storage { get; private set; } = null!;


        /// <summary>
        /// Create a NexusRepositoryYumHosted resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NexusRepositoryYumHosted(string name, NexusRepositoryYumHostedArgs args, CustomResourceOptions? options = null)
            : base("nexus:index/nexusRepositoryYumHosted:NexusRepositoryYumHosted", name, args ?? new NexusRepositoryYumHostedArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NexusRepositoryYumHosted(string name, Input<string> id, NexusRepositoryYumHostedState? state = null, CustomResourceOptions? options = null)
            : base("nexus:index/nexusRepositoryYumHosted:NexusRepositoryYumHosted", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/SimCubeLtd/pulumi-nexus/releases/download/v${VERSION}",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NexusRepositoryYumHosted resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NexusRepositoryYumHosted Get(string name, Input<string> id, NexusRepositoryYumHostedState? state = null, CustomResourceOptions? options = null)
        {
            return new NexusRepositoryYumHosted(name, id, state, options);
        }
    }

    public sealed class NexusRepositoryYumHostedArgs : Pulumi.ResourceArgs
    {
        [Input("cleanups")]
        private InputList<Inputs.NexusRepositoryYumHostedCleanupArgs>? _cleanups;

        /// <summary>
        /// Cleanup policies
        /// </summary>
        public InputList<Inputs.NexusRepositoryYumHostedCleanupArgs> Cleanups
        {
            get => _cleanups ?? (_cleanups = new InputList<Inputs.NexusRepositoryYumHostedCleanupArgs>());
            set => _cleanups = value;
        }

        /// <summary>
        /// Component configuration for the hosted repository
        /// </summary>
        [Input("component")]
        public Input<Inputs.NexusRepositoryYumHostedComponentArgs>? Component { get; set; }

        /// <summary>
        /// Validate that all paths are RPMs or yum metadata. Possible values: `STRICT` or `PERMISSIVE`
        /// </summary>
        [Input("deployPolicy")]
        public Input<string>? DeployPolicy { get; set; }

        /// <summary>
        /// A unique identifier for this repository
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether this repository accepts incoming requests
        /// </summary>
        [Input("online")]
        public Input<bool>? Online { get; set; }

        /// <summary>
        /// Specifies the repository depth where repodata folder(s) are created. Possible values: 0-5
        /// </summary>
        [Input("repodataDepth")]
        public Input<int>? RepodataDepth { get; set; }

        /// <summary>
        /// The storage configuration of the repository
        /// </summary>
        [Input("storage", required: true)]
        public Input<Inputs.NexusRepositoryYumHostedStorageArgs> Storage { get; set; } = null!;

        public NexusRepositoryYumHostedArgs()
        {
        }
    }

    public sealed class NexusRepositoryYumHostedState : Pulumi.ResourceArgs
    {
        [Input("cleanups")]
        private InputList<Inputs.NexusRepositoryYumHostedCleanupGetArgs>? _cleanups;

        /// <summary>
        /// Cleanup policies
        /// </summary>
        public InputList<Inputs.NexusRepositoryYumHostedCleanupGetArgs> Cleanups
        {
            get => _cleanups ?? (_cleanups = new InputList<Inputs.NexusRepositoryYumHostedCleanupGetArgs>());
            set => _cleanups = value;
        }

        /// <summary>
        /// Component configuration for the hosted repository
        /// </summary>
        [Input("component")]
        public Input<Inputs.NexusRepositoryYumHostedComponentGetArgs>? Component { get; set; }

        /// <summary>
        /// Validate that all paths are RPMs or yum metadata. Possible values: `STRICT` or `PERMISSIVE`
        /// </summary>
        [Input("deployPolicy")]
        public Input<string>? DeployPolicy { get; set; }

        /// <summary>
        /// A unique identifier for this repository
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether this repository accepts incoming requests
        /// </summary>
        [Input("online")]
        public Input<bool>? Online { get; set; }

        /// <summary>
        /// Specifies the repository depth where repodata folder(s) are created. Possible values: 0-5
        /// </summary>
        [Input("repodataDepth")]
        public Input<int>? RepodataDepth { get; set; }

        /// <summary>
        /// The storage configuration of the repository
        /// </summary>
        [Input("storage")]
        public Input<Inputs.NexusRepositoryYumHostedStorageGetArgs>? Storage { get; set; }

        public NexusRepositoryYumHostedState()
        {
        }
    }
}
