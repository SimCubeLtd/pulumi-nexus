// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nexus

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NexusAnonymous struct {
	pulumi.CustomResourceState

	// Activate the anonymous access to the repository manager. Default: false
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The name of the used realm. Default: "NexusAuthorizingRealm"
	RealmName pulumi.StringPtrOutput `pulumi:"realmName"`
	// The user id used by anonymous access. Default: "anonymous"
	UserId pulumi.StringPtrOutput `pulumi:"userId"`
}

// NewNexusAnonymous registers a new resource with the given unique name, arguments, and options.
func NewNexusAnonymous(ctx *pulumi.Context,
	name string, args *NexusAnonymousArgs, opts ...pulumi.ResourceOption) (*NexusAnonymous, error) {
	if args == nil {
		args = &NexusAnonymousArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource NexusAnonymous
	err := ctx.RegisterResource("nexus:index/nexusAnonymous:NexusAnonymous", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNexusAnonymous gets an existing NexusAnonymous resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNexusAnonymous(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NexusAnonymousState, opts ...pulumi.ResourceOption) (*NexusAnonymous, error) {
	var resource NexusAnonymous
	err := ctx.ReadResource("nexus:index/nexusAnonymous:NexusAnonymous", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NexusAnonymous resources.
type nexusAnonymousState struct {
	// Activate the anonymous access to the repository manager. Default: false
	Enabled *bool `pulumi:"enabled"`
	// The name of the used realm. Default: "NexusAuthorizingRealm"
	RealmName *string `pulumi:"realmName"`
	// The user id used by anonymous access. Default: "anonymous"
	UserId *string `pulumi:"userId"`
}

type NexusAnonymousState struct {
	// Activate the anonymous access to the repository manager. Default: false
	Enabled pulumi.BoolPtrInput
	// The name of the used realm. Default: "NexusAuthorizingRealm"
	RealmName pulumi.StringPtrInput
	// The user id used by anonymous access. Default: "anonymous"
	UserId pulumi.StringPtrInput
}

func (NexusAnonymousState) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusAnonymousState)(nil)).Elem()
}

type nexusAnonymousArgs struct {
	// Activate the anonymous access to the repository manager. Default: false
	Enabled *bool `pulumi:"enabled"`
	// The name of the used realm. Default: "NexusAuthorizingRealm"
	RealmName *string `pulumi:"realmName"`
	// The user id used by anonymous access. Default: "anonymous"
	UserId *string `pulumi:"userId"`
}

// The set of arguments for constructing a NexusAnonymous resource.
type NexusAnonymousArgs struct {
	// Activate the anonymous access to the repository manager. Default: false
	Enabled pulumi.BoolPtrInput
	// The name of the used realm. Default: "NexusAuthorizingRealm"
	RealmName pulumi.StringPtrInput
	// The user id used by anonymous access. Default: "anonymous"
	UserId pulumi.StringPtrInput
}

func (NexusAnonymousArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusAnonymousArgs)(nil)).Elem()
}

type NexusAnonymousInput interface {
	pulumi.Input

	ToNexusAnonymousOutput() NexusAnonymousOutput
	ToNexusAnonymousOutputWithContext(ctx context.Context) NexusAnonymousOutput
}

func (*NexusAnonymous) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusAnonymous)(nil)).Elem()
}

func (i *NexusAnonymous) ToNexusAnonymousOutput() NexusAnonymousOutput {
	return i.ToNexusAnonymousOutputWithContext(context.Background())
}

func (i *NexusAnonymous) ToNexusAnonymousOutputWithContext(ctx context.Context) NexusAnonymousOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusAnonymousOutput)
}

// NexusAnonymousArrayInput is an input type that accepts NexusAnonymousArray and NexusAnonymousArrayOutput values.
// You can construct a concrete instance of `NexusAnonymousArrayInput` via:
//
//          NexusAnonymousArray{ NexusAnonymousArgs{...} }
type NexusAnonymousArrayInput interface {
	pulumi.Input

	ToNexusAnonymousArrayOutput() NexusAnonymousArrayOutput
	ToNexusAnonymousArrayOutputWithContext(context.Context) NexusAnonymousArrayOutput
}

type NexusAnonymousArray []NexusAnonymousInput

func (NexusAnonymousArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusAnonymous)(nil)).Elem()
}

func (i NexusAnonymousArray) ToNexusAnonymousArrayOutput() NexusAnonymousArrayOutput {
	return i.ToNexusAnonymousArrayOutputWithContext(context.Background())
}

func (i NexusAnonymousArray) ToNexusAnonymousArrayOutputWithContext(ctx context.Context) NexusAnonymousArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusAnonymousArrayOutput)
}

// NexusAnonymousMapInput is an input type that accepts NexusAnonymousMap and NexusAnonymousMapOutput values.
// You can construct a concrete instance of `NexusAnonymousMapInput` via:
//
//          NexusAnonymousMap{ "key": NexusAnonymousArgs{...} }
type NexusAnonymousMapInput interface {
	pulumi.Input

	ToNexusAnonymousMapOutput() NexusAnonymousMapOutput
	ToNexusAnonymousMapOutputWithContext(context.Context) NexusAnonymousMapOutput
}

type NexusAnonymousMap map[string]NexusAnonymousInput

func (NexusAnonymousMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusAnonymous)(nil)).Elem()
}

func (i NexusAnonymousMap) ToNexusAnonymousMapOutput() NexusAnonymousMapOutput {
	return i.ToNexusAnonymousMapOutputWithContext(context.Background())
}

func (i NexusAnonymousMap) ToNexusAnonymousMapOutputWithContext(ctx context.Context) NexusAnonymousMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusAnonymousMapOutput)
}

type NexusAnonymousOutput struct{ *pulumi.OutputState }

func (NexusAnonymousOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusAnonymous)(nil)).Elem()
}

func (o NexusAnonymousOutput) ToNexusAnonymousOutput() NexusAnonymousOutput {
	return o
}

func (o NexusAnonymousOutput) ToNexusAnonymousOutputWithContext(ctx context.Context) NexusAnonymousOutput {
	return o
}

// Activate the anonymous access to the repository manager. Default: false
func (o NexusAnonymousOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NexusAnonymous) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The name of the used realm. Default: "NexusAuthorizingRealm"
func (o NexusAnonymousOutput) RealmName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusAnonymous) pulumi.StringPtrOutput { return v.RealmName }).(pulumi.StringPtrOutput)
}

// The user id used by anonymous access. Default: "anonymous"
func (o NexusAnonymousOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusAnonymous) pulumi.StringPtrOutput { return v.UserId }).(pulumi.StringPtrOutput)
}

type NexusAnonymousArrayOutput struct{ *pulumi.OutputState }

func (NexusAnonymousArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusAnonymous)(nil)).Elem()
}

func (o NexusAnonymousArrayOutput) ToNexusAnonymousArrayOutput() NexusAnonymousArrayOutput {
	return o
}

func (o NexusAnonymousArrayOutput) ToNexusAnonymousArrayOutputWithContext(ctx context.Context) NexusAnonymousArrayOutput {
	return o
}

func (o NexusAnonymousArrayOutput) Index(i pulumi.IntInput) NexusAnonymousOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NexusAnonymous {
		return vs[0].([]*NexusAnonymous)[vs[1].(int)]
	}).(NexusAnonymousOutput)
}

type NexusAnonymousMapOutput struct{ *pulumi.OutputState }

func (NexusAnonymousMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusAnonymous)(nil)).Elem()
}

func (o NexusAnonymousMapOutput) ToNexusAnonymousMapOutput() NexusAnonymousMapOutput {
	return o
}

func (o NexusAnonymousMapOutput) ToNexusAnonymousMapOutputWithContext(ctx context.Context) NexusAnonymousMapOutput {
	return o
}

func (o NexusAnonymousMapOutput) MapIndex(k pulumi.StringInput) NexusAnonymousOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NexusAnonymous {
		return vs[0].(map[string]*NexusAnonymous)[vs[1].(string)]
	}).(NexusAnonymousOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NexusAnonymousInput)(nil)).Elem(), &NexusAnonymous{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusAnonymousArrayInput)(nil)).Elem(), NexusAnonymousArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusAnonymousMapInput)(nil)).Elem(), NexusAnonymousMap{})
	pulumi.RegisterOutputType(NexusAnonymousOutput{})
	pulumi.RegisterOutputType(NexusAnonymousArrayOutput{})
	pulumi.RegisterOutputType(NexusAnonymousMapOutput{})
}
