// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nexus

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NexusBlobstore struct {
	pulumi.CustomResourceState

	// Available space in Bytes
	AvailableSpaceInBytes pulumi.StringOutput `pulumi:"availableSpaceInBytes"`
	// Count of blobs
	BlobCount pulumi.IntOutput `pulumi:"blobCount"`
	// The S3 bucket configuration. Needed for blobstore type 'S3'
	BucketConfiguration NexusBlobstoreBucketConfigurationPtrOutput `pulumi:"bucketConfiguration"`
	// Blobstore name
	Name pulumi.StringOutput `pulumi:"name"`
	// The path to the blobstore contents. This can be an absolute path to anywhere on the system nxrm has access to or it can
	// be a path relative to the sonatype-work directory
	Path pulumi.StringPtrOutput `pulumi:"path"`
	// Soft quota of the blobstore
	SoftQuota NexusBlobstoreSoftQuotaPtrOutput `pulumi:"softQuota"`
	// The total size of the blobstore in Bytes
	TotalSizeInBytes pulumi.IntOutput `pulumi:"totalSizeInBytes"`
	// The type of the blobstore. Possible values: `S3` or `File`
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNexusBlobstore registers a new resource with the given unique name, arguments, and options.
func NewNexusBlobstore(ctx *pulumi.Context,
	name string, args *NexusBlobstoreArgs, opts ...pulumi.ResourceOption) (*NexusBlobstore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource NexusBlobstore
	err := ctx.RegisterResource("nexus:index/nexusBlobstore:NexusBlobstore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNexusBlobstore gets an existing NexusBlobstore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNexusBlobstore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NexusBlobstoreState, opts ...pulumi.ResourceOption) (*NexusBlobstore, error) {
	var resource NexusBlobstore
	err := ctx.ReadResource("nexus:index/nexusBlobstore:NexusBlobstore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NexusBlobstore resources.
type nexusBlobstoreState struct {
	// Available space in Bytes
	AvailableSpaceInBytes *string `pulumi:"availableSpaceInBytes"`
	// Count of blobs
	BlobCount *int `pulumi:"blobCount"`
	// The S3 bucket configuration. Needed for blobstore type 'S3'
	BucketConfiguration *NexusBlobstoreBucketConfiguration `pulumi:"bucketConfiguration"`
	// Blobstore name
	Name *string `pulumi:"name"`
	// The path to the blobstore contents. This can be an absolute path to anywhere on the system nxrm has access to or it can
	// be a path relative to the sonatype-work directory
	Path *string `pulumi:"path"`
	// Soft quota of the blobstore
	SoftQuota *NexusBlobstoreSoftQuota `pulumi:"softQuota"`
	// The total size of the blobstore in Bytes
	TotalSizeInBytes *int `pulumi:"totalSizeInBytes"`
	// The type of the blobstore. Possible values: `S3` or `File`
	Type *string `pulumi:"type"`
}

type NexusBlobstoreState struct {
	// Available space in Bytes
	AvailableSpaceInBytes pulumi.StringPtrInput
	// Count of blobs
	BlobCount pulumi.IntPtrInput
	// The S3 bucket configuration. Needed for blobstore type 'S3'
	BucketConfiguration NexusBlobstoreBucketConfigurationPtrInput
	// Blobstore name
	Name pulumi.StringPtrInput
	// The path to the blobstore contents. This can be an absolute path to anywhere on the system nxrm has access to or it can
	// be a path relative to the sonatype-work directory
	Path pulumi.StringPtrInput
	// Soft quota of the blobstore
	SoftQuota NexusBlobstoreSoftQuotaPtrInput
	// The total size of the blobstore in Bytes
	TotalSizeInBytes pulumi.IntPtrInput
	// The type of the blobstore. Possible values: `S3` or `File`
	Type pulumi.StringPtrInput
}

func (NexusBlobstoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusBlobstoreState)(nil)).Elem()
}

type nexusBlobstoreArgs struct {
	// The S3 bucket configuration. Needed for blobstore type 'S3'
	BucketConfiguration *NexusBlobstoreBucketConfiguration `pulumi:"bucketConfiguration"`
	// Blobstore name
	Name *string `pulumi:"name"`
	// The path to the blobstore contents. This can be an absolute path to anywhere on the system nxrm has access to or it can
	// be a path relative to the sonatype-work directory
	Path *string `pulumi:"path"`
	// Soft quota of the blobstore
	SoftQuota *NexusBlobstoreSoftQuota `pulumi:"softQuota"`
	// The type of the blobstore. Possible values: `S3` or `File`
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a NexusBlobstore resource.
type NexusBlobstoreArgs struct {
	// The S3 bucket configuration. Needed for blobstore type 'S3'
	BucketConfiguration NexusBlobstoreBucketConfigurationPtrInput
	// Blobstore name
	Name pulumi.StringPtrInput
	// The path to the blobstore contents. This can be an absolute path to anywhere on the system nxrm has access to or it can
	// be a path relative to the sonatype-work directory
	Path pulumi.StringPtrInput
	// Soft quota of the blobstore
	SoftQuota NexusBlobstoreSoftQuotaPtrInput
	// The type of the blobstore. Possible values: `S3` or `File`
	Type pulumi.StringInput
}

func (NexusBlobstoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusBlobstoreArgs)(nil)).Elem()
}

type NexusBlobstoreInput interface {
	pulumi.Input

	ToNexusBlobstoreOutput() NexusBlobstoreOutput
	ToNexusBlobstoreOutputWithContext(ctx context.Context) NexusBlobstoreOutput
}

func (*NexusBlobstore) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusBlobstore)(nil)).Elem()
}

func (i *NexusBlobstore) ToNexusBlobstoreOutput() NexusBlobstoreOutput {
	return i.ToNexusBlobstoreOutputWithContext(context.Background())
}

func (i *NexusBlobstore) ToNexusBlobstoreOutputWithContext(ctx context.Context) NexusBlobstoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusBlobstoreOutput)
}

// NexusBlobstoreArrayInput is an input type that accepts NexusBlobstoreArray and NexusBlobstoreArrayOutput values.
// You can construct a concrete instance of `NexusBlobstoreArrayInput` via:
//
//          NexusBlobstoreArray{ NexusBlobstoreArgs{...} }
type NexusBlobstoreArrayInput interface {
	pulumi.Input

	ToNexusBlobstoreArrayOutput() NexusBlobstoreArrayOutput
	ToNexusBlobstoreArrayOutputWithContext(context.Context) NexusBlobstoreArrayOutput
}

type NexusBlobstoreArray []NexusBlobstoreInput

func (NexusBlobstoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusBlobstore)(nil)).Elem()
}

func (i NexusBlobstoreArray) ToNexusBlobstoreArrayOutput() NexusBlobstoreArrayOutput {
	return i.ToNexusBlobstoreArrayOutputWithContext(context.Background())
}

func (i NexusBlobstoreArray) ToNexusBlobstoreArrayOutputWithContext(ctx context.Context) NexusBlobstoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusBlobstoreArrayOutput)
}

// NexusBlobstoreMapInput is an input type that accepts NexusBlobstoreMap and NexusBlobstoreMapOutput values.
// You can construct a concrete instance of `NexusBlobstoreMapInput` via:
//
//          NexusBlobstoreMap{ "key": NexusBlobstoreArgs{...} }
type NexusBlobstoreMapInput interface {
	pulumi.Input

	ToNexusBlobstoreMapOutput() NexusBlobstoreMapOutput
	ToNexusBlobstoreMapOutputWithContext(context.Context) NexusBlobstoreMapOutput
}

type NexusBlobstoreMap map[string]NexusBlobstoreInput

func (NexusBlobstoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusBlobstore)(nil)).Elem()
}

func (i NexusBlobstoreMap) ToNexusBlobstoreMapOutput() NexusBlobstoreMapOutput {
	return i.ToNexusBlobstoreMapOutputWithContext(context.Background())
}

func (i NexusBlobstoreMap) ToNexusBlobstoreMapOutputWithContext(ctx context.Context) NexusBlobstoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusBlobstoreMapOutput)
}

type NexusBlobstoreOutput struct{ *pulumi.OutputState }

func (NexusBlobstoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusBlobstore)(nil)).Elem()
}

func (o NexusBlobstoreOutput) ToNexusBlobstoreOutput() NexusBlobstoreOutput {
	return o
}

func (o NexusBlobstoreOutput) ToNexusBlobstoreOutputWithContext(ctx context.Context) NexusBlobstoreOutput {
	return o
}

// Available space in Bytes
func (o NexusBlobstoreOutput) AvailableSpaceInBytes() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusBlobstore) pulumi.StringOutput { return v.AvailableSpaceInBytes }).(pulumi.StringOutput)
}

// Count of blobs
func (o NexusBlobstoreOutput) BlobCount() pulumi.IntOutput {
	return o.ApplyT(func(v *NexusBlobstore) pulumi.IntOutput { return v.BlobCount }).(pulumi.IntOutput)
}

// The S3 bucket configuration. Needed for blobstore type 'S3'
func (o NexusBlobstoreOutput) BucketConfiguration() NexusBlobstoreBucketConfigurationPtrOutput {
	return o.ApplyT(func(v *NexusBlobstore) NexusBlobstoreBucketConfigurationPtrOutput { return v.BucketConfiguration }).(NexusBlobstoreBucketConfigurationPtrOutput)
}

// Blobstore name
func (o NexusBlobstoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusBlobstore) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The path to the blobstore contents. This can be an absolute path to anywhere on the system nxrm has access to or it can
// be a path relative to the sonatype-work directory
func (o NexusBlobstoreOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusBlobstore) pulumi.StringPtrOutput { return v.Path }).(pulumi.StringPtrOutput)
}

// Soft quota of the blobstore
func (o NexusBlobstoreOutput) SoftQuota() NexusBlobstoreSoftQuotaPtrOutput {
	return o.ApplyT(func(v *NexusBlobstore) NexusBlobstoreSoftQuotaPtrOutput { return v.SoftQuota }).(NexusBlobstoreSoftQuotaPtrOutput)
}

// The total size of the blobstore in Bytes
func (o NexusBlobstoreOutput) TotalSizeInBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *NexusBlobstore) pulumi.IntOutput { return v.TotalSizeInBytes }).(pulumi.IntOutput)
}

// The type of the blobstore. Possible values: `S3` or `File`
func (o NexusBlobstoreOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusBlobstore) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type NexusBlobstoreArrayOutput struct{ *pulumi.OutputState }

func (NexusBlobstoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusBlobstore)(nil)).Elem()
}

func (o NexusBlobstoreArrayOutput) ToNexusBlobstoreArrayOutput() NexusBlobstoreArrayOutput {
	return o
}

func (o NexusBlobstoreArrayOutput) ToNexusBlobstoreArrayOutputWithContext(ctx context.Context) NexusBlobstoreArrayOutput {
	return o
}

func (o NexusBlobstoreArrayOutput) Index(i pulumi.IntInput) NexusBlobstoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NexusBlobstore {
		return vs[0].([]*NexusBlobstore)[vs[1].(int)]
	}).(NexusBlobstoreOutput)
}

type NexusBlobstoreMapOutput struct{ *pulumi.OutputState }

func (NexusBlobstoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusBlobstore)(nil)).Elem()
}

func (o NexusBlobstoreMapOutput) ToNexusBlobstoreMapOutput() NexusBlobstoreMapOutput {
	return o
}

func (o NexusBlobstoreMapOutput) ToNexusBlobstoreMapOutputWithContext(ctx context.Context) NexusBlobstoreMapOutput {
	return o
}

func (o NexusBlobstoreMapOutput) MapIndex(k pulumi.StringInput) NexusBlobstoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NexusBlobstore {
		return vs[0].(map[string]*NexusBlobstore)[vs[1].(string)]
	}).(NexusBlobstoreOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NexusBlobstoreInput)(nil)).Elem(), &NexusBlobstore{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusBlobstoreArrayInput)(nil)).Elem(), NexusBlobstoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusBlobstoreMapInput)(nil)).Elem(), NexusBlobstoreMap{})
	pulumi.RegisterOutputType(NexusBlobstoreOutput{})
	pulumi.RegisterOutputType(NexusBlobstoreArrayOutput{})
	pulumi.RegisterOutputType(NexusBlobstoreMapOutput{})
}
