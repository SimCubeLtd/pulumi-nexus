// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nexus

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NexusBlobstoreFile struct {
	pulumi.CustomResourceState

	// Available space in Bytes
	AvailableSpaceInBytes pulumi.IntOutput `pulumi:"availableSpaceInBytes"`
	// Count of blobs
	BlobCount pulumi.IntOutput `pulumi:"blobCount"`
	// Blobstore name
	Name pulumi.StringOutput `pulumi:"name"`
	// The path to the blobstore contents. This can be an absolute path to anywhere on the system nxrm has access to or it can
	// be a path relative to the sonatype-work directory
	Path pulumi.StringPtrOutput `pulumi:"path"`
	// Soft quota of the blobstore
	SoftQuota NexusBlobstoreFileSoftQuotaPtrOutput `pulumi:"softQuota"`
	// The total size of the blobstore in Bytes
	TotalSizeInBytes pulumi.IntOutput `pulumi:"totalSizeInBytes"`
}

// NewNexusBlobstoreFile registers a new resource with the given unique name, arguments, and options.
func NewNexusBlobstoreFile(ctx *pulumi.Context,
	name string, args *NexusBlobstoreFileArgs, opts ...pulumi.ResourceOption) (*NexusBlobstoreFile, error) {
	if args == nil {
		args = &NexusBlobstoreFileArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource NexusBlobstoreFile
	err := ctx.RegisterResource("nexus:index/nexusBlobstoreFile:NexusBlobstoreFile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNexusBlobstoreFile gets an existing NexusBlobstoreFile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNexusBlobstoreFile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NexusBlobstoreFileState, opts ...pulumi.ResourceOption) (*NexusBlobstoreFile, error) {
	var resource NexusBlobstoreFile
	err := ctx.ReadResource("nexus:index/nexusBlobstoreFile:NexusBlobstoreFile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NexusBlobstoreFile resources.
type nexusBlobstoreFileState struct {
	// Available space in Bytes
	AvailableSpaceInBytes *int `pulumi:"availableSpaceInBytes"`
	// Count of blobs
	BlobCount *int `pulumi:"blobCount"`
	// Blobstore name
	Name *string `pulumi:"name"`
	// The path to the blobstore contents. This can be an absolute path to anywhere on the system nxrm has access to or it can
	// be a path relative to the sonatype-work directory
	Path *string `pulumi:"path"`
	// Soft quota of the blobstore
	SoftQuota *NexusBlobstoreFileSoftQuota `pulumi:"softQuota"`
	// The total size of the blobstore in Bytes
	TotalSizeInBytes *int `pulumi:"totalSizeInBytes"`
}

type NexusBlobstoreFileState struct {
	// Available space in Bytes
	AvailableSpaceInBytes pulumi.IntPtrInput
	// Count of blobs
	BlobCount pulumi.IntPtrInput
	// Blobstore name
	Name pulumi.StringPtrInput
	// The path to the blobstore contents. This can be an absolute path to anywhere on the system nxrm has access to or it can
	// be a path relative to the sonatype-work directory
	Path pulumi.StringPtrInput
	// Soft quota of the blobstore
	SoftQuota NexusBlobstoreFileSoftQuotaPtrInput
	// The total size of the blobstore in Bytes
	TotalSizeInBytes pulumi.IntPtrInput
}

func (NexusBlobstoreFileState) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusBlobstoreFileState)(nil)).Elem()
}

type nexusBlobstoreFileArgs struct {
	// Blobstore name
	Name *string `pulumi:"name"`
	// The path to the blobstore contents. This can be an absolute path to anywhere on the system nxrm has access to or it can
	// be a path relative to the sonatype-work directory
	Path *string `pulumi:"path"`
	// Soft quota of the blobstore
	SoftQuota *NexusBlobstoreFileSoftQuota `pulumi:"softQuota"`
}

// The set of arguments for constructing a NexusBlobstoreFile resource.
type NexusBlobstoreFileArgs struct {
	// Blobstore name
	Name pulumi.StringPtrInput
	// The path to the blobstore contents. This can be an absolute path to anywhere on the system nxrm has access to or it can
	// be a path relative to the sonatype-work directory
	Path pulumi.StringPtrInput
	// Soft quota of the blobstore
	SoftQuota NexusBlobstoreFileSoftQuotaPtrInput
}

func (NexusBlobstoreFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusBlobstoreFileArgs)(nil)).Elem()
}

type NexusBlobstoreFileInput interface {
	pulumi.Input

	ToNexusBlobstoreFileOutput() NexusBlobstoreFileOutput
	ToNexusBlobstoreFileOutputWithContext(ctx context.Context) NexusBlobstoreFileOutput
}

func (*NexusBlobstoreFile) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusBlobstoreFile)(nil)).Elem()
}

func (i *NexusBlobstoreFile) ToNexusBlobstoreFileOutput() NexusBlobstoreFileOutput {
	return i.ToNexusBlobstoreFileOutputWithContext(context.Background())
}

func (i *NexusBlobstoreFile) ToNexusBlobstoreFileOutputWithContext(ctx context.Context) NexusBlobstoreFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusBlobstoreFileOutput)
}

// NexusBlobstoreFileArrayInput is an input type that accepts NexusBlobstoreFileArray and NexusBlobstoreFileArrayOutput values.
// You can construct a concrete instance of `NexusBlobstoreFileArrayInput` via:
//
//          NexusBlobstoreFileArray{ NexusBlobstoreFileArgs{...} }
type NexusBlobstoreFileArrayInput interface {
	pulumi.Input

	ToNexusBlobstoreFileArrayOutput() NexusBlobstoreFileArrayOutput
	ToNexusBlobstoreFileArrayOutputWithContext(context.Context) NexusBlobstoreFileArrayOutput
}

type NexusBlobstoreFileArray []NexusBlobstoreFileInput

func (NexusBlobstoreFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusBlobstoreFile)(nil)).Elem()
}

func (i NexusBlobstoreFileArray) ToNexusBlobstoreFileArrayOutput() NexusBlobstoreFileArrayOutput {
	return i.ToNexusBlobstoreFileArrayOutputWithContext(context.Background())
}

func (i NexusBlobstoreFileArray) ToNexusBlobstoreFileArrayOutputWithContext(ctx context.Context) NexusBlobstoreFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusBlobstoreFileArrayOutput)
}

// NexusBlobstoreFileMapInput is an input type that accepts NexusBlobstoreFileMap and NexusBlobstoreFileMapOutput values.
// You can construct a concrete instance of `NexusBlobstoreFileMapInput` via:
//
//          NexusBlobstoreFileMap{ "key": NexusBlobstoreFileArgs{...} }
type NexusBlobstoreFileMapInput interface {
	pulumi.Input

	ToNexusBlobstoreFileMapOutput() NexusBlobstoreFileMapOutput
	ToNexusBlobstoreFileMapOutputWithContext(context.Context) NexusBlobstoreFileMapOutput
}

type NexusBlobstoreFileMap map[string]NexusBlobstoreFileInput

func (NexusBlobstoreFileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusBlobstoreFile)(nil)).Elem()
}

func (i NexusBlobstoreFileMap) ToNexusBlobstoreFileMapOutput() NexusBlobstoreFileMapOutput {
	return i.ToNexusBlobstoreFileMapOutputWithContext(context.Background())
}

func (i NexusBlobstoreFileMap) ToNexusBlobstoreFileMapOutputWithContext(ctx context.Context) NexusBlobstoreFileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusBlobstoreFileMapOutput)
}

type NexusBlobstoreFileOutput struct{ *pulumi.OutputState }

func (NexusBlobstoreFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusBlobstoreFile)(nil)).Elem()
}

func (o NexusBlobstoreFileOutput) ToNexusBlobstoreFileOutput() NexusBlobstoreFileOutput {
	return o
}

func (o NexusBlobstoreFileOutput) ToNexusBlobstoreFileOutputWithContext(ctx context.Context) NexusBlobstoreFileOutput {
	return o
}

// Available space in Bytes
func (o NexusBlobstoreFileOutput) AvailableSpaceInBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *NexusBlobstoreFile) pulumi.IntOutput { return v.AvailableSpaceInBytes }).(pulumi.IntOutput)
}

// Count of blobs
func (o NexusBlobstoreFileOutput) BlobCount() pulumi.IntOutput {
	return o.ApplyT(func(v *NexusBlobstoreFile) pulumi.IntOutput { return v.BlobCount }).(pulumi.IntOutput)
}

// Blobstore name
func (o NexusBlobstoreFileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusBlobstoreFile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The path to the blobstore contents. This can be an absolute path to anywhere on the system nxrm has access to or it can
// be a path relative to the sonatype-work directory
func (o NexusBlobstoreFileOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusBlobstoreFile) pulumi.StringPtrOutput { return v.Path }).(pulumi.StringPtrOutput)
}

// Soft quota of the blobstore
func (o NexusBlobstoreFileOutput) SoftQuota() NexusBlobstoreFileSoftQuotaPtrOutput {
	return o.ApplyT(func(v *NexusBlobstoreFile) NexusBlobstoreFileSoftQuotaPtrOutput { return v.SoftQuota }).(NexusBlobstoreFileSoftQuotaPtrOutput)
}

// The total size of the blobstore in Bytes
func (o NexusBlobstoreFileOutput) TotalSizeInBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *NexusBlobstoreFile) pulumi.IntOutput { return v.TotalSizeInBytes }).(pulumi.IntOutput)
}

type NexusBlobstoreFileArrayOutput struct{ *pulumi.OutputState }

func (NexusBlobstoreFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusBlobstoreFile)(nil)).Elem()
}

func (o NexusBlobstoreFileArrayOutput) ToNexusBlobstoreFileArrayOutput() NexusBlobstoreFileArrayOutput {
	return o
}

func (o NexusBlobstoreFileArrayOutput) ToNexusBlobstoreFileArrayOutputWithContext(ctx context.Context) NexusBlobstoreFileArrayOutput {
	return o
}

func (o NexusBlobstoreFileArrayOutput) Index(i pulumi.IntInput) NexusBlobstoreFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NexusBlobstoreFile {
		return vs[0].([]*NexusBlobstoreFile)[vs[1].(int)]
	}).(NexusBlobstoreFileOutput)
}

type NexusBlobstoreFileMapOutput struct{ *pulumi.OutputState }

func (NexusBlobstoreFileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusBlobstoreFile)(nil)).Elem()
}

func (o NexusBlobstoreFileMapOutput) ToNexusBlobstoreFileMapOutput() NexusBlobstoreFileMapOutput {
	return o
}

func (o NexusBlobstoreFileMapOutput) ToNexusBlobstoreFileMapOutputWithContext(ctx context.Context) NexusBlobstoreFileMapOutput {
	return o
}

func (o NexusBlobstoreFileMapOutput) MapIndex(k pulumi.StringInput) NexusBlobstoreFileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NexusBlobstoreFile {
		return vs[0].(map[string]*NexusBlobstoreFile)[vs[1].(string)]
	}).(NexusBlobstoreFileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NexusBlobstoreFileInput)(nil)).Elem(), &NexusBlobstoreFile{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusBlobstoreFileArrayInput)(nil)).Elem(), NexusBlobstoreFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusBlobstoreFileMapInput)(nil)).Elem(), NexusBlobstoreFileMap{})
	pulumi.RegisterOutputType(NexusBlobstoreFileOutput{})
	pulumi.RegisterOutputType(NexusBlobstoreFileArrayOutput{})
	pulumi.RegisterOutputType(NexusBlobstoreFileMapOutput{})
}
