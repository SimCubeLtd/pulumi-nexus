// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nexus

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NexusBlobstoreS3 struct {
	pulumi.CustomResourceState

	// Count of blobs
	BlobCount pulumi.IntOutput `pulumi:"blobCount"`
	// The S3 bucket configuration.
	BucketConfiguration NexusBlobstoreS3BucketConfigurationOutput `pulumi:"bucketConfiguration"`
	// Blobstore name
	Name pulumi.StringOutput `pulumi:"name"`
	// Soft quota of the blobstore
	SoftQuota NexusBlobstoreS3SoftQuotaPtrOutput `pulumi:"softQuota"`
	// The total size of the blobstore in Bytes
	TotalSizeInBytes pulumi.IntOutput `pulumi:"totalSizeInBytes"`
}

// NewNexusBlobstoreS3 registers a new resource with the given unique name, arguments, and options.
func NewNexusBlobstoreS3(ctx *pulumi.Context,
	name string, args *NexusBlobstoreS3Args, opts ...pulumi.ResourceOption) (*NexusBlobstoreS3, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BucketConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'BucketConfiguration'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource NexusBlobstoreS3
	err := ctx.RegisterResource("nexus:index/nexusBlobstoreS3:NexusBlobstoreS3", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNexusBlobstoreS3 gets an existing NexusBlobstoreS3 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNexusBlobstoreS3(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NexusBlobstoreS3State, opts ...pulumi.ResourceOption) (*NexusBlobstoreS3, error) {
	var resource NexusBlobstoreS3
	err := ctx.ReadResource("nexus:index/nexusBlobstoreS3:NexusBlobstoreS3", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NexusBlobstoreS3 resources.
type nexusBlobstoreS3State struct {
	// Count of blobs
	BlobCount *int `pulumi:"blobCount"`
	// The S3 bucket configuration.
	BucketConfiguration *NexusBlobstoreS3BucketConfiguration `pulumi:"bucketConfiguration"`
	// Blobstore name
	Name *string `pulumi:"name"`
	// Soft quota of the blobstore
	SoftQuota *NexusBlobstoreS3SoftQuota `pulumi:"softQuota"`
	// The total size of the blobstore in Bytes
	TotalSizeInBytes *int `pulumi:"totalSizeInBytes"`
}

type NexusBlobstoreS3State struct {
	// Count of blobs
	BlobCount pulumi.IntPtrInput
	// The S3 bucket configuration.
	BucketConfiguration NexusBlobstoreS3BucketConfigurationPtrInput
	// Blobstore name
	Name pulumi.StringPtrInput
	// Soft quota of the blobstore
	SoftQuota NexusBlobstoreS3SoftQuotaPtrInput
	// The total size of the blobstore in Bytes
	TotalSizeInBytes pulumi.IntPtrInput
}

func (NexusBlobstoreS3State) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusBlobstoreS3State)(nil)).Elem()
}

type nexusBlobstoreS3Args struct {
	// The S3 bucket configuration.
	BucketConfiguration NexusBlobstoreS3BucketConfiguration `pulumi:"bucketConfiguration"`
	// Blobstore name
	Name *string `pulumi:"name"`
	// Soft quota of the blobstore
	SoftQuota *NexusBlobstoreS3SoftQuota `pulumi:"softQuota"`
}

// The set of arguments for constructing a NexusBlobstoreS3 resource.
type NexusBlobstoreS3Args struct {
	// The S3 bucket configuration.
	BucketConfiguration NexusBlobstoreS3BucketConfigurationInput
	// Blobstore name
	Name pulumi.StringPtrInput
	// Soft quota of the blobstore
	SoftQuota NexusBlobstoreS3SoftQuotaPtrInput
}

func (NexusBlobstoreS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusBlobstoreS3Args)(nil)).Elem()
}

type NexusBlobstoreS3Input interface {
	pulumi.Input

	ToNexusBlobstoreS3Output() NexusBlobstoreS3Output
	ToNexusBlobstoreS3OutputWithContext(ctx context.Context) NexusBlobstoreS3Output
}

func (*NexusBlobstoreS3) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusBlobstoreS3)(nil)).Elem()
}

func (i *NexusBlobstoreS3) ToNexusBlobstoreS3Output() NexusBlobstoreS3Output {
	return i.ToNexusBlobstoreS3OutputWithContext(context.Background())
}

func (i *NexusBlobstoreS3) ToNexusBlobstoreS3OutputWithContext(ctx context.Context) NexusBlobstoreS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(NexusBlobstoreS3Output)
}

// NexusBlobstoreS3ArrayInput is an input type that accepts NexusBlobstoreS3Array and NexusBlobstoreS3ArrayOutput values.
// You can construct a concrete instance of `NexusBlobstoreS3ArrayInput` via:
//
//          NexusBlobstoreS3Array{ NexusBlobstoreS3Args{...} }
type NexusBlobstoreS3ArrayInput interface {
	pulumi.Input

	ToNexusBlobstoreS3ArrayOutput() NexusBlobstoreS3ArrayOutput
	ToNexusBlobstoreS3ArrayOutputWithContext(context.Context) NexusBlobstoreS3ArrayOutput
}

type NexusBlobstoreS3Array []NexusBlobstoreS3Input

func (NexusBlobstoreS3Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusBlobstoreS3)(nil)).Elem()
}

func (i NexusBlobstoreS3Array) ToNexusBlobstoreS3ArrayOutput() NexusBlobstoreS3ArrayOutput {
	return i.ToNexusBlobstoreS3ArrayOutputWithContext(context.Background())
}

func (i NexusBlobstoreS3Array) ToNexusBlobstoreS3ArrayOutputWithContext(ctx context.Context) NexusBlobstoreS3ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusBlobstoreS3ArrayOutput)
}

// NexusBlobstoreS3MapInput is an input type that accepts NexusBlobstoreS3Map and NexusBlobstoreS3MapOutput values.
// You can construct a concrete instance of `NexusBlobstoreS3MapInput` via:
//
//          NexusBlobstoreS3Map{ "key": NexusBlobstoreS3Args{...} }
type NexusBlobstoreS3MapInput interface {
	pulumi.Input

	ToNexusBlobstoreS3MapOutput() NexusBlobstoreS3MapOutput
	ToNexusBlobstoreS3MapOutputWithContext(context.Context) NexusBlobstoreS3MapOutput
}

type NexusBlobstoreS3Map map[string]NexusBlobstoreS3Input

func (NexusBlobstoreS3Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusBlobstoreS3)(nil)).Elem()
}

func (i NexusBlobstoreS3Map) ToNexusBlobstoreS3MapOutput() NexusBlobstoreS3MapOutput {
	return i.ToNexusBlobstoreS3MapOutputWithContext(context.Background())
}

func (i NexusBlobstoreS3Map) ToNexusBlobstoreS3MapOutputWithContext(ctx context.Context) NexusBlobstoreS3MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusBlobstoreS3MapOutput)
}

type NexusBlobstoreS3Output struct{ *pulumi.OutputState }

func (NexusBlobstoreS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusBlobstoreS3)(nil)).Elem()
}

func (o NexusBlobstoreS3Output) ToNexusBlobstoreS3Output() NexusBlobstoreS3Output {
	return o
}

func (o NexusBlobstoreS3Output) ToNexusBlobstoreS3OutputWithContext(ctx context.Context) NexusBlobstoreS3Output {
	return o
}

// Count of blobs
func (o NexusBlobstoreS3Output) BlobCount() pulumi.IntOutput {
	return o.ApplyT(func(v *NexusBlobstoreS3) pulumi.IntOutput { return v.BlobCount }).(pulumi.IntOutput)
}

// The S3 bucket configuration.
func (o NexusBlobstoreS3Output) BucketConfiguration() NexusBlobstoreS3BucketConfigurationOutput {
	return o.ApplyT(func(v *NexusBlobstoreS3) NexusBlobstoreS3BucketConfigurationOutput { return v.BucketConfiguration }).(NexusBlobstoreS3BucketConfigurationOutput)
}

// Blobstore name
func (o NexusBlobstoreS3Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusBlobstoreS3) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Soft quota of the blobstore
func (o NexusBlobstoreS3Output) SoftQuota() NexusBlobstoreS3SoftQuotaPtrOutput {
	return o.ApplyT(func(v *NexusBlobstoreS3) NexusBlobstoreS3SoftQuotaPtrOutput { return v.SoftQuota }).(NexusBlobstoreS3SoftQuotaPtrOutput)
}

// The total size of the blobstore in Bytes
func (o NexusBlobstoreS3Output) TotalSizeInBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *NexusBlobstoreS3) pulumi.IntOutput { return v.TotalSizeInBytes }).(pulumi.IntOutput)
}

type NexusBlobstoreS3ArrayOutput struct{ *pulumi.OutputState }

func (NexusBlobstoreS3ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusBlobstoreS3)(nil)).Elem()
}

func (o NexusBlobstoreS3ArrayOutput) ToNexusBlobstoreS3ArrayOutput() NexusBlobstoreS3ArrayOutput {
	return o
}

func (o NexusBlobstoreS3ArrayOutput) ToNexusBlobstoreS3ArrayOutputWithContext(ctx context.Context) NexusBlobstoreS3ArrayOutput {
	return o
}

func (o NexusBlobstoreS3ArrayOutput) Index(i pulumi.IntInput) NexusBlobstoreS3Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NexusBlobstoreS3 {
		return vs[0].([]*NexusBlobstoreS3)[vs[1].(int)]
	}).(NexusBlobstoreS3Output)
}

type NexusBlobstoreS3MapOutput struct{ *pulumi.OutputState }

func (NexusBlobstoreS3MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusBlobstoreS3)(nil)).Elem()
}

func (o NexusBlobstoreS3MapOutput) ToNexusBlobstoreS3MapOutput() NexusBlobstoreS3MapOutput {
	return o
}

func (o NexusBlobstoreS3MapOutput) ToNexusBlobstoreS3MapOutputWithContext(ctx context.Context) NexusBlobstoreS3MapOutput {
	return o
}

func (o NexusBlobstoreS3MapOutput) MapIndex(k pulumi.StringInput) NexusBlobstoreS3Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NexusBlobstoreS3 {
		return vs[0].(map[string]*NexusBlobstoreS3)[vs[1].(string)]
	}).(NexusBlobstoreS3Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NexusBlobstoreS3Input)(nil)).Elem(), &NexusBlobstoreS3{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusBlobstoreS3ArrayInput)(nil)).Elem(), NexusBlobstoreS3Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusBlobstoreS3MapInput)(nil)).Elem(), NexusBlobstoreS3Map{})
	pulumi.RegisterOutputType(NexusBlobstoreS3Output{})
	pulumi.RegisterOutputType(NexusBlobstoreS3ArrayOutput{})
	pulumi.RegisterOutputType(NexusBlobstoreS3MapOutput{})
}
