// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nexus

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NexusContentSelector struct {
	pulumi.CustomResourceState

	// A description of the content selector
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The content selector expression
	Expression pulumi.StringOutput `pulumi:"expression"`
	// Content selector name
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewNexusContentSelector registers a new resource with the given unique name, arguments, and options.
func NewNexusContentSelector(ctx *pulumi.Context,
	name string, args *NexusContentSelectorArgs, opts ...pulumi.ResourceOption) (*NexusContentSelector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Expression == nil {
		return nil, errors.New("invalid value for required argument 'Expression'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource NexusContentSelector
	err := ctx.RegisterResource("nexus:index/nexusContentSelector:NexusContentSelector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNexusContentSelector gets an existing NexusContentSelector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNexusContentSelector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NexusContentSelectorState, opts ...pulumi.ResourceOption) (*NexusContentSelector, error) {
	var resource NexusContentSelector
	err := ctx.ReadResource("nexus:index/nexusContentSelector:NexusContentSelector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NexusContentSelector resources.
type nexusContentSelectorState struct {
	// A description of the content selector
	Description *string `pulumi:"description"`
	// The content selector expression
	Expression *string `pulumi:"expression"`
	// Content selector name
	Name *string `pulumi:"name"`
}

type NexusContentSelectorState struct {
	// A description of the content selector
	Description pulumi.StringPtrInput
	// The content selector expression
	Expression pulumi.StringPtrInput
	// Content selector name
	Name pulumi.StringPtrInput
}

func (NexusContentSelectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusContentSelectorState)(nil)).Elem()
}

type nexusContentSelectorArgs struct {
	// A description of the content selector
	Description *string `pulumi:"description"`
	// The content selector expression
	Expression string `pulumi:"expression"`
	// Content selector name
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a NexusContentSelector resource.
type NexusContentSelectorArgs struct {
	// A description of the content selector
	Description pulumi.StringPtrInput
	// The content selector expression
	Expression pulumi.StringInput
	// Content selector name
	Name pulumi.StringPtrInput
}

func (NexusContentSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusContentSelectorArgs)(nil)).Elem()
}

type NexusContentSelectorInput interface {
	pulumi.Input

	ToNexusContentSelectorOutput() NexusContentSelectorOutput
	ToNexusContentSelectorOutputWithContext(ctx context.Context) NexusContentSelectorOutput
}

func (*NexusContentSelector) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusContentSelector)(nil)).Elem()
}

func (i *NexusContentSelector) ToNexusContentSelectorOutput() NexusContentSelectorOutput {
	return i.ToNexusContentSelectorOutputWithContext(context.Background())
}

func (i *NexusContentSelector) ToNexusContentSelectorOutputWithContext(ctx context.Context) NexusContentSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusContentSelectorOutput)
}

// NexusContentSelectorArrayInput is an input type that accepts NexusContentSelectorArray and NexusContentSelectorArrayOutput values.
// You can construct a concrete instance of `NexusContentSelectorArrayInput` via:
//
//          NexusContentSelectorArray{ NexusContentSelectorArgs{...} }
type NexusContentSelectorArrayInput interface {
	pulumi.Input

	ToNexusContentSelectorArrayOutput() NexusContentSelectorArrayOutput
	ToNexusContentSelectorArrayOutputWithContext(context.Context) NexusContentSelectorArrayOutput
}

type NexusContentSelectorArray []NexusContentSelectorInput

func (NexusContentSelectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusContentSelector)(nil)).Elem()
}

func (i NexusContentSelectorArray) ToNexusContentSelectorArrayOutput() NexusContentSelectorArrayOutput {
	return i.ToNexusContentSelectorArrayOutputWithContext(context.Background())
}

func (i NexusContentSelectorArray) ToNexusContentSelectorArrayOutputWithContext(ctx context.Context) NexusContentSelectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusContentSelectorArrayOutput)
}

// NexusContentSelectorMapInput is an input type that accepts NexusContentSelectorMap and NexusContentSelectorMapOutput values.
// You can construct a concrete instance of `NexusContentSelectorMapInput` via:
//
//          NexusContentSelectorMap{ "key": NexusContentSelectorArgs{...} }
type NexusContentSelectorMapInput interface {
	pulumi.Input

	ToNexusContentSelectorMapOutput() NexusContentSelectorMapOutput
	ToNexusContentSelectorMapOutputWithContext(context.Context) NexusContentSelectorMapOutput
}

type NexusContentSelectorMap map[string]NexusContentSelectorInput

func (NexusContentSelectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusContentSelector)(nil)).Elem()
}

func (i NexusContentSelectorMap) ToNexusContentSelectorMapOutput() NexusContentSelectorMapOutput {
	return i.ToNexusContentSelectorMapOutputWithContext(context.Background())
}

func (i NexusContentSelectorMap) ToNexusContentSelectorMapOutputWithContext(ctx context.Context) NexusContentSelectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusContentSelectorMapOutput)
}

type NexusContentSelectorOutput struct{ *pulumi.OutputState }

func (NexusContentSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusContentSelector)(nil)).Elem()
}

func (o NexusContentSelectorOutput) ToNexusContentSelectorOutput() NexusContentSelectorOutput {
	return o
}

func (o NexusContentSelectorOutput) ToNexusContentSelectorOutputWithContext(ctx context.Context) NexusContentSelectorOutput {
	return o
}

// A description of the content selector
func (o NexusContentSelectorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusContentSelector) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The content selector expression
func (o NexusContentSelectorOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusContentSelector) pulumi.StringOutput { return v.Expression }).(pulumi.StringOutput)
}

// Content selector name
func (o NexusContentSelectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusContentSelector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type NexusContentSelectorArrayOutput struct{ *pulumi.OutputState }

func (NexusContentSelectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusContentSelector)(nil)).Elem()
}

func (o NexusContentSelectorArrayOutput) ToNexusContentSelectorArrayOutput() NexusContentSelectorArrayOutput {
	return o
}

func (o NexusContentSelectorArrayOutput) ToNexusContentSelectorArrayOutputWithContext(ctx context.Context) NexusContentSelectorArrayOutput {
	return o
}

func (o NexusContentSelectorArrayOutput) Index(i pulumi.IntInput) NexusContentSelectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NexusContentSelector {
		return vs[0].([]*NexusContentSelector)[vs[1].(int)]
	}).(NexusContentSelectorOutput)
}

type NexusContentSelectorMapOutput struct{ *pulumi.OutputState }

func (NexusContentSelectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusContentSelector)(nil)).Elem()
}

func (o NexusContentSelectorMapOutput) ToNexusContentSelectorMapOutput() NexusContentSelectorMapOutput {
	return o
}

func (o NexusContentSelectorMapOutput) ToNexusContentSelectorMapOutputWithContext(ctx context.Context) NexusContentSelectorMapOutput {
	return o
}

func (o NexusContentSelectorMapOutput) MapIndex(k pulumi.StringInput) NexusContentSelectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NexusContentSelector {
		return vs[0].(map[string]*NexusContentSelector)[vs[1].(string)]
	}).(NexusContentSelectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NexusContentSelectorInput)(nil)).Elem(), &NexusContentSelector{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusContentSelectorArrayInput)(nil)).Elem(), NexusContentSelectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusContentSelectorMapInput)(nil)).Elem(), NexusContentSelectorMap{})
	pulumi.RegisterOutputType(NexusContentSelectorOutput{})
	pulumi.RegisterOutputType(NexusContentSelectorArrayOutput{})
	pulumi.RegisterOutputType(NexusContentSelectorMapOutput{})
}
