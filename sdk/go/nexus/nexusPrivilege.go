// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nexus

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NexusPrivilege struct {
	pulumi.CustomResourceState

	// Actions for the privilege (browse, read, edit, add, delete, all and run)
	Actions pulumi.StringArrayOutput `pulumi:"actions"`
	// The content selector for the privilege
	ContentSelector pulumi.StringPtrOutput `pulumi:"contentSelector"`
	// A description of the privilege
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The domain of the privilege
	Domain pulumi.StringPtrOutput `pulumi:"domain"`
	// The format of the privilege. Possible values: `apt`, `bower`, `conan`, `docker`, `gitlfs`, `go`, `helm`, `maven2`,
	// `npm`, `nuget`, `p2`, `pypi`, `raw`, `rubygems`, `yum`
	Format pulumi.StringPtrOutput `pulumi:"format"`
	// The name of the privilege
	Name pulumi.StringOutput `pulumi:"name"`
	// The wildcard privilege pattern
	Pattern pulumi.StringPtrOutput `pulumi:"pattern"`
	// The repository of the privilege
	Repository pulumi.StringPtrOutput `pulumi:"repository"`
	// The script name related to the privilege
	ScriptName pulumi.StringPtrOutput `pulumi:"scriptName"`
	// The type of the privilege. Possible values: `application`, `repository-admin`, `repository-content-selector`,
	// `repository-view`, `script`, `wildcard`
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNexusPrivilege registers a new resource with the given unique name, arguments, and options.
func NewNexusPrivilege(ctx *pulumi.Context,
	name string, args *NexusPrivilegeArgs, opts ...pulumi.ResourceOption) (*NexusPrivilege, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Actions == nil {
		return nil, errors.New("invalid value for required argument 'Actions'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource NexusPrivilege
	err := ctx.RegisterResource("nexus:index/nexusPrivilege:NexusPrivilege", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNexusPrivilege gets an existing NexusPrivilege resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNexusPrivilege(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NexusPrivilegeState, opts ...pulumi.ResourceOption) (*NexusPrivilege, error) {
	var resource NexusPrivilege
	err := ctx.ReadResource("nexus:index/nexusPrivilege:NexusPrivilege", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NexusPrivilege resources.
type nexusPrivilegeState struct {
	// Actions for the privilege (browse, read, edit, add, delete, all and run)
	Actions []string `pulumi:"actions"`
	// The content selector for the privilege
	ContentSelector *string `pulumi:"contentSelector"`
	// A description of the privilege
	Description *string `pulumi:"description"`
	// The domain of the privilege
	Domain *string `pulumi:"domain"`
	// The format of the privilege. Possible values: `apt`, `bower`, `conan`, `docker`, `gitlfs`, `go`, `helm`, `maven2`,
	// `npm`, `nuget`, `p2`, `pypi`, `raw`, `rubygems`, `yum`
	Format *string `pulumi:"format"`
	// The name of the privilege
	Name *string `pulumi:"name"`
	// The wildcard privilege pattern
	Pattern *string `pulumi:"pattern"`
	// The repository of the privilege
	Repository *string `pulumi:"repository"`
	// The script name related to the privilege
	ScriptName *string `pulumi:"scriptName"`
	// The type of the privilege. Possible values: `application`, `repository-admin`, `repository-content-selector`,
	// `repository-view`, `script`, `wildcard`
	Type *string `pulumi:"type"`
}

type NexusPrivilegeState struct {
	// Actions for the privilege (browse, read, edit, add, delete, all and run)
	Actions pulumi.StringArrayInput
	// The content selector for the privilege
	ContentSelector pulumi.StringPtrInput
	// A description of the privilege
	Description pulumi.StringPtrInput
	// The domain of the privilege
	Domain pulumi.StringPtrInput
	// The format of the privilege. Possible values: `apt`, `bower`, `conan`, `docker`, `gitlfs`, `go`, `helm`, `maven2`,
	// `npm`, `nuget`, `p2`, `pypi`, `raw`, `rubygems`, `yum`
	Format pulumi.StringPtrInput
	// The name of the privilege
	Name pulumi.StringPtrInput
	// The wildcard privilege pattern
	Pattern pulumi.StringPtrInput
	// The repository of the privilege
	Repository pulumi.StringPtrInput
	// The script name related to the privilege
	ScriptName pulumi.StringPtrInput
	// The type of the privilege. Possible values: `application`, `repository-admin`, `repository-content-selector`,
	// `repository-view`, `script`, `wildcard`
	Type pulumi.StringPtrInput
}

func (NexusPrivilegeState) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusPrivilegeState)(nil)).Elem()
}

type nexusPrivilegeArgs struct {
	// Actions for the privilege (browse, read, edit, add, delete, all and run)
	Actions []string `pulumi:"actions"`
	// The content selector for the privilege
	ContentSelector *string `pulumi:"contentSelector"`
	// A description of the privilege
	Description *string `pulumi:"description"`
	// The domain of the privilege
	Domain *string `pulumi:"domain"`
	// The format of the privilege. Possible values: `apt`, `bower`, `conan`, `docker`, `gitlfs`, `go`, `helm`, `maven2`,
	// `npm`, `nuget`, `p2`, `pypi`, `raw`, `rubygems`, `yum`
	Format *string `pulumi:"format"`
	// The name of the privilege
	Name *string `pulumi:"name"`
	// The wildcard privilege pattern
	Pattern *string `pulumi:"pattern"`
	// The repository of the privilege
	Repository *string `pulumi:"repository"`
	// The script name related to the privilege
	ScriptName *string `pulumi:"scriptName"`
	// The type of the privilege. Possible values: `application`, `repository-admin`, `repository-content-selector`,
	// `repository-view`, `script`, `wildcard`
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a NexusPrivilege resource.
type NexusPrivilegeArgs struct {
	// Actions for the privilege (browse, read, edit, add, delete, all and run)
	Actions pulumi.StringArrayInput
	// The content selector for the privilege
	ContentSelector pulumi.StringPtrInput
	// A description of the privilege
	Description pulumi.StringPtrInput
	// The domain of the privilege
	Domain pulumi.StringPtrInput
	// The format of the privilege. Possible values: `apt`, `bower`, `conan`, `docker`, `gitlfs`, `go`, `helm`, `maven2`,
	// `npm`, `nuget`, `p2`, `pypi`, `raw`, `rubygems`, `yum`
	Format pulumi.StringPtrInput
	// The name of the privilege
	Name pulumi.StringPtrInput
	// The wildcard privilege pattern
	Pattern pulumi.StringPtrInput
	// The repository of the privilege
	Repository pulumi.StringPtrInput
	// The script name related to the privilege
	ScriptName pulumi.StringPtrInput
	// The type of the privilege. Possible values: `application`, `repository-admin`, `repository-content-selector`,
	// `repository-view`, `script`, `wildcard`
	Type pulumi.StringInput
}

func (NexusPrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusPrivilegeArgs)(nil)).Elem()
}

type NexusPrivilegeInput interface {
	pulumi.Input

	ToNexusPrivilegeOutput() NexusPrivilegeOutput
	ToNexusPrivilegeOutputWithContext(ctx context.Context) NexusPrivilegeOutput
}

func (*NexusPrivilege) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusPrivilege)(nil)).Elem()
}

func (i *NexusPrivilege) ToNexusPrivilegeOutput() NexusPrivilegeOutput {
	return i.ToNexusPrivilegeOutputWithContext(context.Background())
}

func (i *NexusPrivilege) ToNexusPrivilegeOutputWithContext(ctx context.Context) NexusPrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusPrivilegeOutput)
}

// NexusPrivilegeArrayInput is an input type that accepts NexusPrivilegeArray and NexusPrivilegeArrayOutput values.
// You can construct a concrete instance of `NexusPrivilegeArrayInput` via:
//
//          NexusPrivilegeArray{ NexusPrivilegeArgs{...} }
type NexusPrivilegeArrayInput interface {
	pulumi.Input

	ToNexusPrivilegeArrayOutput() NexusPrivilegeArrayOutput
	ToNexusPrivilegeArrayOutputWithContext(context.Context) NexusPrivilegeArrayOutput
}

type NexusPrivilegeArray []NexusPrivilegeInput

func (NexusPrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusPrivilege)(nil)).Elem()
}

func (i NexusPrivilegeArray) ToNexusPrivilegeArrayOutput() NexusPrivilegeArrayOutput {
	return i.ToNexusPrivilegeArrayOutputWithContext(context.Background())
}

func (i NexusPrivilegeArray) ToNexusPrivilegeArrayOutputWithContext(ctx context.Context) NexusPrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusPrivilegeArrayOutput)
}

// NexusPrivilegeMapInput is an input type that accepts NexusPrivilegeMap and NexusPrivilegeMapOutput values.
// You can construct a concrete instance of `NexusPrivilegeMapInput` via:
//
//          NexusPrivilegeMap{ "key": NexusPrivilegeArgs{...} }
type NexusPrivilegeMapInput interface {
	pulumi.Input

	ToNexusPrivilegeMapOutput() NexusPrivilegeMapOutput
	ToNexusPrivilegeMapOutputWithContext(context.Context) NexusPrivilegeMapOutput
}

type NexusPrivilegeMap map[string]NexusPrivilegeInput

func (NexusPrivilegeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusPrivilege)(nil)).Elem()
}

func (i NexusPrivilegeMap) ToNexusPrivilegeMapOutput() NexusPrivilegeMapOutput {
	return i.ToNexusPrivilegeMapOutputWithContext(context.Background())
}

func (i NexusPrivilegeMap) ToNexusPrivilegeMapOutputWithContext(ctx context.Context) NexusPrivilegeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusPrivilegeMapOutput)
}

type NexusPrivilegeOutput struct{ *pulumi.OutputState }

func (NexusPrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusPrivilege)(nil)).Elem()
}

func (o NexusPrivilegeOutput) ToNexusPrivilegeOutput() NexusPrivilegeOutput {
	return o
}

func (o NexusPrivilegeOutput) ToNexusPrivilegeOutputWithContext(ctx context.Context) NexusPrivilegeOutput {
	return o
}

// Actions for the privilege (browse, read, edit, add, delete, all and run)
func (o NexusPrivilegeOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NexusPrivilege) pulumi.StringArrayOutput { return v.Actions }).(pulumi.StringArrayOutput)
}

// The content selector for the privilege
func (o NexusPrivilegeOutput) ContentSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusPrivilege) pulumi.StringPtrOutput { return v.ContentSelector }).(pulumi.StringPtrOutput)
}

// A description of the privilege
func (o NexusPrivilegeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusPrivilege) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The domain of the privilege
func (o NexusPrivilegeOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusPrivilege) pulumi.StringPtrOutput { return v.Domain }).(pulumi.StringPtrOutput)
}

// The format of the privilege. Possible values: `apt`, `bower`, `conan`, `docker`, `gitlfs`, `go`, `helm`, `maven2`,
// `npm`, `nuget`, `p2`, `pypi`, `raw`, `rubygems`, `yum`
func (o NexusPrivilegeOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusPrivilege) pulumi.StringPtrOutput { return v.Format }).(pulumi.StringPtrOutput)
}

// The name of the privilege
func (o NexusPrivilegeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusPrivilege) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The wildcard privilege pattern
func (o NexusPrivilegeOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusPrivilege) pulumi.StringPtrOutput { return v.Pattern }).(pulumi.StringPtrOutput)
}

// The repository of the privilege
func (o NexusPrivilegeOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusPrivilege) pulumi.StringPtrOutput { return v.Repository }).(pulumi.StringPtrOutput)
}

// The script name related to the privilege
func (o NexusPrivilegeOutput) ScriptName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusPrivilege) pulumi.StringPtrOutput { return v.ScriptName }).(pulumi.StringPtrOutput)
}

// The type of the privilege. Possible values: `application`, `repository-admin`, `repository-content-selector`,
// `repository-view`, `script`, `wildcard`
func (o NexusPrivilegeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusPrivilege) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type NexusPrivilegeArrayOutput struct{ *pulumi.OutputState }

func (NexusPrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusPrivilege)(nil)).Elem()
}

func (o NexusPrivilegeArrayOutput) ToNexusPrivilegeArrayOutput() NexusPrivilegeArrayOutput {
	return o
}

func (o NexusPrivilegeArrayOutput) ToNexusPrivilegeArrayOutputWithContext(ctx context.Context) NexusPrivilegeArrayOutput {
	return o
}

func (o NexusPrivilegeArrayOutput) Index(i pulumi.IntInput) NexusPrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NexusPrivilege {
		return vs[0].([]*NexusPrivilege)[vs[1].(int)]
	}).(NexusPrivilegeOutput)
}

type NexusPrivilegeMapOutput struct{ *pulumi.OutputState }

func (NexusPrivilegeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusPrivilege)(nil)).Elem()
}

func (o NexusPrivilegeMapOutput) ToNexusPrivilegeMapOutput() NexusPrivilegeMapOutput {
	return o
}

func (o NexusPrivilegeMapOutput) ToNexusPrivilegeMapOutputWithContext(ctx context.Context) NexusPrivilegeMapOutput {
	return o
}

func (o NexusPrivilegeMapOutput) MapIndex(k pulumi.StringInput) NexusPrivilegeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NexusPrivilege {
		return vs[0].(map[string]*NexusPrivilege)[vs[1].(string)]
	}).(NexusPrivilegeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NexusPrivilegeInput)(nil)).Elem(), &NexusPrivilege{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusPrivilegeArrayInput)(nil)).Elem(), NexusPrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusPrivilegeMapInput)(nil)).Elem(), NexusPrivilegeMap{})
	pulumi.RegisterOutputType(NexusPrivilegeOutput{})
	pulumi.RegisterOutputType(NexusPrivilegeArrayOutput{})
	pulumi.RegisterOutputType(NexusPrivilegeMapOutput{})
}
