// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nexus

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NexusRepository struct {
	pulumi.CustomResourceState

	// Apt signing configuration for the repository
	AptSignings NexusRepositoryAptSigningArrayOutput `pulumi:"aptSignings"`
	// Apt specific configuration of the repository
	Apts NexusRepositoryAptArrayOutput `pulumi:"apts"`
	// Bower specific configuration of the repository
	Bowers NexusRepositoryBowerArrayOutput `pulumi:"bowers"`
	// Cleanup policies
	Cleanups NexusRepositoryCleanupArrayOutput `pulumi:"cleanups"`
	// Configuration for docker proxy repository
	DockerProxy NexusRepositoryDockerProxyTypePtrOutput `pulumi:"dockerProxy"`
	// Docker specific configuration of the repository
	Dockers NexusRepositoryDockerArrayOutput `pulumi:"dockers"`
	// Repository format. Possible values: `apt`, `bower`, `conan`, `docker`, `gitlfs`, `go`, `helm`, `maven2`, `npm`, `nuget`,
	// `p2`, `pypi`, `raw`, `rubygems`, `yum`
	Format pulumi.StringOutput `pulumi:"format"`
	// Configuration for repository group
	Group NexusRepositoryGroupPtrOutput `pulumi:"group"`
	// HTTP Client configuration for proxy repositories. Required for docker proxy repositories.
	HttpClient NexusRepositoryHttpClientPtrOutput `pulumi:"httpClient"`
	// Maven specific configuration of the repository
	Maven NexusRepositoryMavenPtrOutput `pulumi:"maven"`
	// A unique identifier for this repository
	Name pulumi.StringOutput `pulumi:"name"`
	// Configuration of the negative cache handling
	NegativeCache NexusRepositoryNegativeCachePtrOutput `pulumi:"negativeCache"`
	// Configuration for the nuget proxy repository
	NugetProxy NexusRepositoryNugetProxyPtrOutput `pulumi:"nugetProxy"`
	// Whether this repository accepts incoming requests
	Online pulumi.BoolPtrOutput `pulumi:"online"`
	// Configuration for the proxy repository
	Proxy NexusRepositoryProxyPtrOutput `pulumi:"proxy"`
	// The storage configuration of the repository
	Storage NexusRepositoryStoragePtrOutput `pulumi:"storage"`
	// Repository type. Possible values: `group`, `hosted`, `proxy`
	Type pulumi.StringOutput `pulumi:"type"`
	// Yum specific configuration of the repository
	Yums NexusRepositoryYumArrayOutput `pulumi:"yums"`
}

// NewNexusRepository registers a new resource with the given unique name, arguments, and options.
func NewNexusRepository(ctx *pulumi.Context,
	name string, args *NexusRepositoryArgs, opts ...pulumi.ResourceOption) (*NexusRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Format == nil {
		return nil, errors.New("invalid value for required argument 'Format'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource NexusRepository
	err := ctx.RegisterResource("nexus:index/nexusRepository:NexusRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNexusRepository gets an existing NexusRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNexusRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NexusRepositoryState, opts ...pulumi.ResourceOption) (*NexusRepository, error) {
	var resource NexusRepository
	err := ctx.ReadResource("nexus:index/nexusRepository:NexusRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NexusRepository resources.
type nexusRepositoryState struct {
	// Apt signing configuration for the repository
	AptSignings []NexusRepositoryAptSigning `pulumi:"aptSignings"`
	// Apt specific configuration of the repository
	Apts []NexusRepositoryApt `pulumi:"apts"`
	// Bower specific configuration of the repository
	Bowers []NexusRepositoryBower `pulumi:"bowers"`
	// Cleanup policies
	Cleanups []NexusRepositoryCleanup `pulumi:"cleanups"`
	// Configuration for docker proxy repository
	DockerProxy *NexusRepositoryDockerProxyType `pulumi:"dockerProxy"`
	// Docker specific configuration of the repository
	Dockers []NexusRepositoryDocker `pulumi:"dockers"`
	// Repository format. Possible values: `apt`, `bower`, `conan`, `docker`, `gitlfs`, `go`, `helm`, `maven2`, `npm`, `nuget`,
	// `p2`, `pypi`, `raw`, `rubygems`, `yum`
	Format *string `pulumi:"format"`
	// Configuration for repository group
	Group *NexusRepositoryGroup `pulumi:"group"`
	// HTTP Client configuration for proxy repositories. Required for docker proxy repositories.
	HttpClient *NexusRepositoryHttpClient `pulumi:"httpClient"`
	// Maven specific configuration of the repository
	Maven *NexusRepositoryMaven `pulumi:"maven"`
	// A unique identifier for this repository
	Name *string `pulumi:"name"`
	// Configuration of the negative cache handling
	NegativeCache *NexusRepositoryNegativeCache `pulumi:"negativeCache"`
	// Configuration for the nuget proxy repository
	NugetProxy *NexusRepositoryNugetProxy `pulumi:"nugetProxy"`
	// Whether this repository accepts incoming requests
	Online *bool `pulumi:"online"`
	// Configuration for the proxy repository
	Proxy *NexusRepositoryProxy `pulumi:"proxy"`
	// The storage configuration of the repository
	Storage *NexusRepositoryStorage `pulumi:"storage"`
	// Repository type. Possible values: `group`, `hosted`, `proxy`
	Type *string `pulumi:"type"`
	// Yum specific configuration of the repository
	Yums []NexusRepositoryYum `pulumi:"yums"`
}

type NexusRepositoryState struct {
	// Apt signing configuration for the repository
	AptSignings NexusRepositoryAptSigningArrayInput
	// Apt specific configuration of the repository
	Apts NexusRepositoryAptArrayInput
	// Bower specific configuration of the repository
	Bowers NexusRepositoryBowerArrayInput
	// Cleanup policies
	Cleanups NexusRepositoryCleanupArrayInput
	// Configuration for docker proxy repository
	DockerProxy NexusRepositoryDockerProxyTypePtrInput
	// Docker specific configuration of the repository
	Dockers NexusRepositoryDockerArrayInput
	// Repository format. Possible values: `apt`, `bower`, `conan`, `docker`, `gitlfs`, `go`, `helm`, `maven2`, `npm`, `nuget`,
	// `p2`, `pypi`, `raw`, `rubygems`, `yum`
	Format pulumi.StringPtrInput
	// Configuration for repository group
	Group NexusRepositoryGroupPtrInput
	// HTTP Client configuration for proxy repositories. Required for docker proxy repositories.
	HttpClient NexusRepositoryHttpClientPtrInput
	// Maven specific configuration of the repository
	Maven NexusRepositoryMavenPtrInput
	// A unique identifier for this repository
	Name pulumi.StringPtrInput
	// Configuration of the negative cache handling
	NegativeCache NexusRepositoryNegativeCachePtrInput
	// Configuration for the nuget proxy repository
	NugetProxy NexusRepositoryNugetProxyPtrInput
	// Whether this repository accepts incoming requests
	Online pulumi.BoolPtrInput
	// Configuration for the proxy repository
	Proxy NexusRepositoryProxyPtrInput
	// The storage configuration of the repository
	Storage NexusRepositoryStoragePtrInput
	// Repository type. Possible values: `group`, `hosted`, `proxy`
	Type pulumi.StringPtrInput
	// Yum specific configuration of the repository
	Yums NexusRepositoryYumArrayInput
}

func (NexusRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusRepositoryState)(nil)).Elem()
}

type nexusRepositoryArgs struct {
	// Apt signing configuration for the repository
	AptSignings []NexusRepositoryAptSigning `pulumi:"aptSignings"`
	// Apt specific configuration of the repository
	Apts []NexusRepositoryApt `pulumi:"apts"`
	// Bower specific configuration of the repository
	Bowers []NexusRepositoryBower `pulumi:"bowers"`
	// Cleanup policies
	Cleanups []NexusRepositoryCleanup `pulumi:"cleanups"`
	// Configuration for docker proxy repository
	DockerProxy *NexusRepositoryDockerProxyType `pulumi:"dockerProxy"`
	// Docker specific configuration of the repository
	Dockers []NexusRepositoryDocker `pulumi:"dockers"`
	// Repository format. Possible values: `apt`, `bower`, `conan`, `docker`, `gitlfs`, `go`, `helm`, `maven2`, `npm`, `nuget`,
	// `p2`, `pypi`, `raw`, `rubygems`, `yum`
	Format string `pulumi:"format"`
	// Configuration for repository group
	Group *NexusRepositoryGroup `pulumi:"group"`
	// HTTP Client configuration for proxy repositories. Required for docker proxy repositories.
	HttpClient *NexusRepositoryHttpClient `pulumi:"httpClient"`
	// Maven specific configuration of the repository
	Maven *NexusRepositoryMaven `pulumi:"maven"`
	// A unique identifier for this repository
	Name *string `pulumi:"name"`
	// Configuration of the negative cache handling
	NegativeCache *NexusRepositoryNegativeCache `pulumi:"negativeCache"`
	// Configuration for the nuget proxy repository
	NugetProxy *NexusRepositoryNugetProxy `pulumi:"nugetProxy"`
	// Whether this repository accepts incoming requests
	Online *bool `pulumi:"online"`
	// Configuration for the proxy repository
	Proxy *NexusRepositoryProxy `pulumi:"proxy"`
	// The storage configuration of the repository
	Storage *NexusRepositoryStorage `pulumi:"storage"`
	// Repository type. Possible values: `group`, `hosted`, `proxy`
	Type string `pulumi:"type"`
	// Yum specific configuration of the repository
	Yums []NexusRepositoryYum `pulumi:"yums"`
}

// The set of arguments for constructing a NexusRepository resource.
type NexusRepositoryArgs struct {
	// Apt signing configuration for the repository
	AptSignings NexusRepositoryAptSigningArrayInput
	// Apt specific configuration of the repository
	Apts NexusRepositoryAptArrayInput
	// Bower specific configuration of the repository
	Bowers NexusRepositoryBowerArrayInput
	// Cleanup policies
	Cleanups NexusRepositoryCleanupArrayInput
	// Configuration for docker proxy repository
	DockerProxy NexusRepositoryDockerProxyTypePtrInput
	// Docker specific configuration of the repository
	Dockers NexusRepositoryDockerArrayInput
	// Repository format. Possible values: `apt`, `bower`, `conan`, `docker`, `gitlfs`, `go`, `helm`, `maven2`, `npm`, `nuget`,
	// `p2`, `pypi`, `raw`, `rubygems`, `yum`
	Format pulumi.StringInput
	// Configuration for repository group
	Group NexusRepositoryGroupPtrInput
	// HTTP Client configuration for proxy repositories. Required for docker proxy repositories.
	HttpClient NexusRepositoryHttpClientPtrInput
	// Maven specific configuration of the repository
	Maven NexusRepositoryMavenPtrInput
	// A unique identifier for this repository
	Name pulumi.StringPtrInput
	// Configuration of the negative cache handling
	NegativeCache NexusRepositoryNegativeCachePtrInput
	// Configuration for the nuget proxy repository
	NugetProxy NexusRepositoryNugetProxyPtrInput
	// Whether this repository accepts incoming requests
	Online pulumi.BoolPtrInput
	// Configuration for the proxy repository
	Proxy NexusRepositoryProxyPtrInput
	// The storage configuration of the repository
	Storage NexusRepositoryStoragePtrInput
	// Repository type. Possible values: `group`, `hosted`, `proxy`
	Type pulumi.StringInput
	// Yum specific configuration of the repository
	Yums NexusRepositoryYumArrayInput
}

func (NexusRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusRepositoryArgs)(nil)).Elem()
}

type NexusRepositoryInput interface {
	pulumi.Input

	ToNexusRepositoryOutput() NexusRepositoryOutput
	ToNexusRepositoryOutputWithContext(ctx context.Context) NexusRepositoryOutput
}

func (*NexusRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusRepository)(nil)).Elem()
}

func (i *NexusRepository) ToNexusRepositoryOutput() NexusRepositoryOutput {
	return i.ToNexusRepositoryOutputWithContext(context.Background())
}

func (i *NexusRepository) ToNexusRepositoryOutputWithContext(ctx context.Context) NexusRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusRepositoryOutput)
}

// NexusRepositoryArrayInput is an input type that accepts NexusRepositoryArray and NexusRepositoryArrayOutput values.
// You can construct a concrete instance of `NexusRepositoryArrayInput` via:
//
//          NexusRepositoryArray{ NexusRepositoryArgs{...} }
type NexusRepositoryArrayInput interface {
	pulumi.Input

	ToNexusRepositoryArrayOutput() NexusRepositoryArrayOutput
	ToNexusRepositoryArrayOutputWithContext(context.Context) NexusRepositoryArrayOutput
}

type NexusRepositoryArray []NexusRepositoryInput

func (NexusRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusRepository)(nil)).Elem()
}

func (i NexusRepositoryArray) ToNexusRepositoryArrayOutput() NexusRepositoryArrayOutput {
	return i.ToNexusRepositoryArrayOutputWithContext(context.Background())
}

func (i NexusRepositoryArray) ToNexusRepositoryArrayOutputWithContext(ctx context.Context) NexusRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusRepositoryArrayOutput)
}

// NexusRepositoryMapInput is an input type that accepts NexusRepositoryMap and NexusRepositoryMapOutput values.
// You can construct a concrete instance of `NexusRepositoryMapInput` via:
//
//          NexusRepositoryMap{ "key": NexusRepositoryArgs{...} }
type NexusRepositoryMapInput interface {
	pulumi.Input

	ToNexusRepositoryMapOutput() NexusRepositoryMapOutput
	ToNexusRepositoryMapOutputWithContext(context.Context) NexusRepositoryMapOutput
}

type NexusRepositoryMap map[string]NexusRepositoryInput

func (NexusRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusRepository)(nil)).Elem()
}

func (i NexusRepositoryMap) ToNexusRepositoryMapOutput() NexusRepositoryMapOutput {
	return i.ToNexusRepositoryMapOutputWithContext(context.Background())
}

func (i NexusRepositoryMap) ToNexusRepositoryMapOutputWithContext(ctx context.Context) NexusRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusRepositoryMapOutput)
}

type NexusRepositoryOutput struct{ *pulumi.OutputState }

func (NexusRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusRepository)(nil)).Elem()
}

func (o NexusRepositoryOutput) ToNexusRepositoryOutput() NexusRepositoryOutput {
	return o
}

func (o NexusRepositoryOutput) ToNexusRepositoryOutputWithContext(ctx context.Context) NexusRepositoryOutput {
	return o
}

// Apt signing configuration for the repository
func (o NexusRepositoryOutput) AptSignings() NexusRepositoryAptSigningArrayOutput {
	return o.ApplyT(func(v *NexusRepository) NexusRepositoryAptSigningArrayOutput { return v.AptSignings }).(NexusRepositoryAptSigningArrayOutput)
}

// Apt specific configuration of the repository
func (o NexusRepositoryOutput) Apts() NexusRepositoryAptArrayOutput {
	return o.ApplyT(func(v *NexusRepository) NexusRepositoryAptArrayOutput { return v.Apts }).(NexusRepositoryAptArrayOutput)
}

// Bower specific configuration of the repository
func (o NexusRepositoryOutput) Bowers() NexusRepositoryBowerArrayOutput {
	return o.ApplyT(func(v *NexusRepository) NexusRepositoryBowerArrayOutput { return v.Bowers }).(NexusRepositoryBowerArrayOutput)
}

// Cleanup policies
func (o NexusRepositoryOutput) Cleanups() NexusRepositoryCleanupArrayOutput {
	return o.ApplyT(func(v *NexusRepository) NexusRepositoryCleanupArrayOutput { return v.Cleanups }).(NexusRepositoryCleanupArrayOutput)
}

// Configuration for docker proxy repository
func (o NexusRepositoryOutput) DockerProxy() NexusRepositoryDockerProxyTypePtrOutput {
	return o.ApplyT(func(v *NexusRepository) NexusRepositoryDockerProxyTypePtrOutput { return v.DockerProxy }).(NexusRepositoryDockerProxyTypePtrOutput)
}

// Docker specific configuration of the repository
func (o NexusRepositoryOutput) Dockers() NexusRepositoryDockerArrayOutput {
	return o.ApplyT(func(v *NexusRepository) NexusRepositoryDockerArrayOutput { return v.Dockers }).(NexusRepositoryDockerArrayOutput)
}

// Repository format. Possible values: `apt`, `bower`, `conan`, `docker`, `gitlfs`, `go`, `helm`, `maven2`, `npm`, `nuget`,
// `p2`, `pypi`, `raw`, `rubygems`, `yum`
func (o NexusRepositoryOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusRepository) pulumi.StringOutput { return v.Format }).(pulumi.StringOutput)
}

// Configuration for repository group
func (o NexusRepositoryOutput) Group() NexusRepositoryGroupPtrOutput {
	return o.ApplyT(func(v *NexusRepository) NexusRepositoryGroupPtrOutput { return v.Group }).(NexusRepositoryGroupPtrOutput)
}

// HTTP Client configuration for proxy repositories. Required for docker proxy repositories.
func (o NexusRepositoryOutput) HttpClient() NexusRepositoryHttpClientPtrOutput {
	return o.ApplyT(func(v *NexusRepository) NexusRepositoryHttpClientPtrOutput { return v.HttpClient }).(NexusRepositoryHttpClientPtrOutput)
}

// Maven specific configuration of the repository
func (o NexusRepositoryOutput) Maven() NexusRepositoryMavenPtrOutput {
	return o.ApplyT(func(v *NexusRepository) NexusRepositoryMavenPtrOutput { return v.Maven }).(NexusRepositoryMavenPtrOutput)
}

// A unique identifier for this repository
func (o NexusRepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusRepository) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Configuration of the negative cache handling
func (o NexusRepositoryOutput) NegativeCache() NexusRepositoryNegativeCachePtrOutput {
	return o.ApplyT(func(v *NexusRepository) NexusRepositoryNegativeCachePtrOutput { return v.NegativeCache }).(NexusRepositoryNegativeCachePtrOutput)
}

// Configuration for the nuget proxy repository
func (o NexusRepositoryOutput) NugetProxy() NexusRepositoryNugetProxyPtrOutput {
	return o.ApplyT(func(v *NexusRepository) NexusRepositoryNugetProxyPtrOutput { return v.NugetProxy }).(NexusRepositoryNugetProxyPtrOutput)
}

// Whether this repository accepts incoming requests
func (o NexusRepositoryOutput) Online() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NexusRepository) pulumi.BoolPtrOutput { return v.Online }).(pulumi.BoolPtrOutput)
}

// Configuration for the proxy repository
func (o NexusRepositoryOutput) Proxy() NexusRepositoryProxyPtrOutput {
	return o.ApplyT(func(v *NexusRepository) NexusRepositoryProxyPtrOutput { return v.Proxy }).(NexusRepositoryProxyPtrOutput)
}

// The storage configuration of the repository
func (o NexusRepositoryOutput) Storage() NexusRepositoryStoragePtrOutput {
	return o.ApplyT(func(v *NexusRepository) NexusRepositoryStoragePtrOutput { return v.Storage }).(NexusRepositoryStoragePtrOutput)
}

// Repository type. Possible values: `group`, `hosted`, `proxy`
func (o NexusRepositoryOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusRepository) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Yum specific configuration of the repository
func (o NexusRepositoryOutput) Yums() NexusRepositoryYumArrayOutput {
	return o.ApplyT(func(v *NexusRepository) NexusRepositoryYumArrayOutput { return v.Yums }).(NexusRepositoryYumArrayOutput)
}

type NexusRepositoryArrayOutput struct{ *pulumi.OutputState }

func (NexusRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusRepository)(nil)).Elem()
}

func (o NexusRepositoryArrayOutput) ToNexusRepositoryArrayOutput() NexusRepositoryArrayOutput {
	return o
}

func (o NexusRepositoryArrayOutput) ToNexusRepositoryArrayOutputWithContext(ctx context.Context) NexusRepositoryArrayOutput {
	return o
}

func (o NexusRepositoryArrayOutput) Index(i pulumi.IntInput) NexusRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NexusRepository {
		return vs[0].([]*NexusRepository)[vs[1].(int)]
	}).(NexusRepositoryOutput)
}

type NexusRepositoryMapOutput struct{ *pulumi.OutputState }

func (NexusRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusRepository)(nil)).Elem()
}

func (o NexusRepositoryMapOutput) ToNexusRepositoryMapOutput() NexusRepositoryMapOutput {
	return o
}

func (o NexusRepositoryMapOutput) ToNexusRepositoryMapOutputWithContext(ctx context.Context) NexusRepositoryMapOutput {
	return o
}

func (o NexusRepositoryMapOutput) MapIndex(k pulumi.StringInput) NexusRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NexusRepository {
		return vs[0].(map[string]*NexusRepository)[vs[1].(string)]
	}).(NexusRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NexusRepositoryInput)(nil)).Elem(), &NexusRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusRepositoryArrayInput)(nil)).Elem(), NexusRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusRepositoryMapInput)(nil)).Elem(), NexusRepositoryMap{})
	pulumi.RegisterOutputType(NexusRepositoryOutput{})
	pulumi.RegisterOutputType(NexusRepositoryArrayOutput{})
	pulumi.RegisterOutputType(NexusRepositoryMapOutput{})
}
