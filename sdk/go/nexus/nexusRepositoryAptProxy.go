// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nexus

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NexusRepositoryAptProxy struct {
	pulumi.CustomResourceState

	// Cleanup policies
	Cleanups NexusRepositoryAptProxyCleanupArrayOutput `pulumi:"cleanups"`
	// Distribution to fetch
	Distribution pulumi.StringOutput `pulumi:"distribution"`
	// Distribution to fetch
	Flat pulumi.BoolOutput `pulumi:"flat"`
	// HTTP Client configuration for proxy repositories. Required for docker proxy repositories
	HttpClient NexusRepositoryAptProxyHttpClientPtrOutput `pulumi:"httpClient"`
	// A unique identifier for this repository
	Name pulumi.StringOutput `pulumi:"name"`
	// Configuration of the negative cache handling
	NegativeCache NexusRepositoryAptProxyNegativeCachePtrOutput `pulumi:"negativeCache"`
	// Whether this repository accepts incoming requests
	Online pulumi.BoolPtrOutput `pulumi:"online"`
	// Configuration for the proxy repository
	Proxy NexusRepositoryAptProxyProxyOutput `pulumi:"proxy"`
	// The name of the routing rule assigned to this repository
	RoutingRule pulumi.StringPtrOutput `pulumi:"routingRule"`
	// The storage configuration of the repository
	Storage NexusRepositoryAptProxyStorageOutput `pulumi:"storage"`
}

// NewNexusRepositoryAptProxy registers a new resource with the given unique name, arguments, and options.
func NewNexusRepositoryAptProxy(ctx *pulumi.Context,
	name string, args *NexusRepositoryAptProxyArgs, opts ...pulumi.ResourceOption) (*NexusRepositoryAptProxy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Distribution == nil {
		return nil, errors.New("invalid value for required argument 'Distribution'")
	}
	if args.Flat == nil {
		return nil, errors.New("invalid value for required argument 'Flat'")
	}
	if args.Proxy == nil {
		return nil, errors.New("invalid value for required argument 'Proxy'")
	}
	if args.Storage == nil {
		return nil, errors.New("invalid value for required argument 'Storage'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource NexusRepositoryAptProxy
	err := ctx.RegisterResource("nexus:index/nexusRepositoryAptProxy:NexusRepositoryAptProxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNexusRepositoryAptProxy gets an existing NexusRepositoryAptProxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNexusRepositoryAptProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NexusRepositoryAptProxyState, opts ...pulumi.ResourceOption) (*NexusRepositoryAptProxy, error) {
	var resource NexusRepositoryAptProxy
	err := ctx.ReadResource("nexus:index/nexusRepositoryAptProxy:NexusRepositoryAptProxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NexusRepositoryAptProxy resources.
type nexusRepositoryAptProxyState struct {
	// Cleanup policies
	Cleanups []NexusRepositoryAptProxyCleanup `pulumi:"cleanups"`
	// Distribution to fetch
	Distribution *string `pulumi:"distribution"`
	// Distribution to fetch
	Flat *bool `pulumi:"flat"`
	// HTTP Client configuration for proxy repositories. Required for docker proxy repositories
	HttpClient *NexusRepositoryAptProxyHttpClient `pulumi:"httpClient"`
	// A unique identifier for this repository
	Name *string `pulumi:"name"`
	// Configuration of the negative cache handling
	NegativeCache *NexusRepositoryAptProxyNegativeCache `pulumi:"negativeCache"`
	// Whether this repository accepts incoming requests
	Online *bool `pulumi:"online"`
	// Configuration for the proxy repository
	Proxy *NexusRepositoryAptProxyProxy `pulumi:"proxy"`
	// The name of the routing rule assigned to this repository
	RoutingRule *string `pulumi:"routingRule"`
	// The storage configuration of the repository
	Storage *NexusRepositoryAptProxyStorage `pulumi:"storage"`
}

type NexusRepositoryAptProxyState struct {
	// Cleanup policies
	Cleanups NexusRepositoryAptProxyCleanupArrayInput
	// Distribution to fetch
	Distribution pulumi.StringPtrInput
	// Distribution to fetch
	Flat pulumi.BoolPtrInput
	// HTTP Client configuration for proxy repositories. Required for docker proxy repositories
	HttpClient NexusRepositoryAptProxyHttpClientPtrInput
	// A unique identifier for this repository
	Name pulumi.StringPtrInput
	// Configuration of the negative cache handling
	NegativeCache NexusRepositoryAptProxyNegativeCachePtrInput
	// Whether this repository accepts incoming requests
	Online pulumi.BoolPtrInput
	// Configuration for the proxy repository
	Proxy NexusRepositoryAptProxyProxyPtrInput
	// The name of the routing rule assigned to this repository
	RoutingRule pulumi.StringPtrInput
	// The storage configuration of the repository
	Storage NexusRepositoryAptProxyStoragePtrInput
}

func (NexusRepositoryAptProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusRepositoryAptProxyState)(nil)).Elem()
}

type nexusRepositoryAptProxyArgs struct {
	// Cleanup policies
	Cleanups []NexusRepositoryAptProxyCleanup `pulumi:"cleanups"`
	// Distribution to fetch
	Distribution string `pulumi:"distribution"`
	// Distribution to fetch
	Flat bool `pulumi:"flat"`
	// HTTP Client configuration for proxy repositories. Required for docker proxy repositories
	HttpClient *NexusRepositoryAptProxyHttpClient `pulumi:"httpClient"`
	// A unique identifier for this repository
	Name *string `pulumi:"name"`
	// Configuration of the negative cache handling
	NegativeCache *NexusRepositoryAptProxyNegativeCache `pulumi:"negativeCache"`
	// Whether this repository accepts incoming requests
	Online *bool `pulumi:"online"`
	// Configuration for the proxy repository
	Proxy NexusRepositoryAptProxyProxy `pulumi:"proxy"`
	// The name of the routing rule assigned to this repository
	RoutingRule *string `pulumi:"routingRule"`
	// The storage configuration of the repository
	Storage NexusRepositoryAptProxyStorage `pulumi:"storage"`
}

// The set of arguments for constructing a NexusRepositoryAptProxy resource.
type NexusRepositoryAptProxyArgs struct {
	// Cleanup policies
	Cleanups NexusRepositoryAptProxyCleanupArrayInput
	// Distribution to fetch
	Distribution pulumi.StringInput
	// Distribution to fetch
	Flat pulumi.BoolInput
	// HTTP Client configuration for proxy repositories. Required for docker proxy repositories
	HttpClient NexusRepositoryAptProxyHttpClientPtrInput
	// A unique identifier for this repository
	Name pulumi.StringPtrInput
	// Configuration of the negative cache handling
	NegativeCache NexusRepositoryAptProxyNegativeCachePtrInput
	// Whether this repository accepts incoming requests
	Online pulumi.BoolPtrInput
	// Configuration for the proxy repository
	Proxy NexusRepositoryAptProxyProxyInput
	// The name of the routing rule assigned to this repository
	RoutingRule pulumi.StringPtrInput
	// The storage configuration of the repository
	Storage NexusRepositoryAptProxyStorageInput
}

func (NexusRepositoryAptProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusRepositoryAptProxyArgs)(nil)).Elem()
}

type NexusRepositoryAptProxyInput interface {
	pulumi.Input

	ToNexusRepositoryAptProxyOutput() NexusRepositoryAptProxyOutput
	ToNexusRepositoryAptProxyOutputWithContext(ctx context.Context) NexusRepositoryAptProxyOutput
}

func (*NexusRepositoryAptProxy) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusRepositoryAptProxy)(nil)).Elem()
}

func (i *NexusRepositoryAptProxy) ToNexusRepositoryAptProxyOutput() NexusRepositoryAptProxyOutput {
	return i.ToNexusRepositoryAptProxyOutputWithContext(context.Background())
}

func (i *NexusRepositoryAptProxy) ToNexusRepositoryAptProxyOutputWithContext(ctx context.Context) NexusRepositoryAptProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusRepositoryAptProxyOutput)
}

// NexusRepositoryAptProxyArrayInput is an input type that accepts NexusRepositoryAptProxyArray and NexusRepositoryAptProxyArrayOutput values.
// You can construct a concrete instance of `NexusRepositoryAptProxyArrayInput` via:
//
//          NexusRepositoryAptProxyArray{ NexusRepositoryAptProxyArgs{...} }
type NexusRepositoryAptProxyArrayInput interface {
	pulumi.Input

	ToNexusRepositoryAptProxyArrayOutput() NexusRepositoryAptProxyArrayOutput
	ToNexusRepositoryAptProxyArrayOutputWithContext(context.Context) NexusRepositoryAptProxyArrayOutput
}

type NexusRepositoryAptProxyArray []NexusRepositoryAptProxyInput

func (NexusRepositoryAptProxyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusRepositoryAptProxy)(nil)).Elem()
}

func (i NexusRepositoryAptProxyArray) ToNexusRepositoryAptProxyArrayOutput() NexusRepositoryAptProxyArrayOutput {
	return i.ToNexusRepositoryAptProxyArrayOutputWithContext(context.Background())
}

func (i NexusRepositoryAptProxyArray) ToNexusRepositoryAptProxyArrayOutputWithContext(ctx context.Context) NexusRepositoryAptProxyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusRepositoryAptProxyArrayOutput)
}

// NexusRepositoryAptProxyMapInput is an input type that accepts NexusRepositoryAptProxyMap and NexusRepositoryAptProxyMapOutput values.
// You can construct a concrete instance of `NexusRepositoryAptProxyMapInput` via:
//
//          NexusRepositoryAptProxyMap{ "key": NexusRepositoryAptProxyArgs{...} }
type NexusRepositoryAptProxyMapInput interface {
	pulumi.Input

	ToNexusRepositoryAptProxyMapOutput() NexusRepositoryAptProxyMapOutput
	ToNexusRepositoryAptProxyMapOutputWithContext(context.Context) NexusRepositoryAptProxyMapOutput
}

type NexusRepositoryAptProxyMap map[string]NexusRepositoryAptProxyInput

func (NexusRepositoryAptProxyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusRepositoryAptProxy)(nil)).Elem()
}

func (i NexusRepositoryAptProxyMap) ToNexusRepositoryAptProxyMapOutput() NexusRepositoryAptProxyMapOutput {
	return i.ToNexusRepositoryAptProxyMapOutputWithContext(context.Background())
}

func (i NexusRepositoryAptProxyMap) ToNexusRepositoryAptProxyMapOutputWithContext(ctx context.Context) NexusRepositoryAptProxyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusRepositoryAptProxyMapOutput)
}

type NexusRepositoryAptProxyOutput struct{ *pulumi.OutputState }

func (NexusRepositoryAptProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusRepositoryAptProxy)(nil)).Elem()
}

func (o NexusRepositoryAptProxyOutput) ToNexusRepositoryAptProxyOutput() NexusRepositoryAptProxyOutput {
	return o
}

func (o NexusRepositoryAptProxyOutput) ToNexusRepositoryAptProxyOutputWithContext(ctx context.Context) NexusRepositoryAptProxyOutput {
	return o
}

// Cleanup policies
func (o NexusRepositoryAptProxyOutput) Cleanups() NexusRepositoryAptProxyCleanupArrayOutput {
	return o.ApplyT(func(v *NexusRepositoryAptProxy) NexusRepositoryAptProxyCleanupArrayOutput { return v.Cleanups }).(NexusRepositoryAptProxyCleanupArrayOutput)
}

// Distribution to fetch
func (o NexusRepositoryAptProxyOutput) Distribution() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusRepositoryAptProxy) pulumi.StringOutput { return v.Distribution }).(pulumi.StringOutput)
}

// Distribution to fetch
func (o NexusRepositoryAptProxyOutput) Flat() pulumi.BoolOutput {
	return o.ApplyT(func(v *NexusRepositoryAptProxy) pulumi.BoolOutput { return v.Flat }).(pulumi.BoolOutput)
}

// HTTP Client configuration for proxy repositories. Required for docker proxy repositories
func (o NexusRepositoryAptProxyOutput) HttpClient() NexusRepositoryAptProxyHttpClientPtrOutput {
	return o.ApplyT(func(v *NexusRepositoryAptProxy) NexusRepositoryAptProxyHttpClientPtrOutput { return v.HttpClient }).(NexusRepositoryAptProxyHttpClientPtrOutput)
}

// A unique identifier for this repository
func (o NexusRepositoryAptProxyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusRepositoryAptProxy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Configuration of the negative cache handling
func (o NexusRepositoryAptProxyOutput) NegativeCache() NexusRepositoryAptProxyNegativeCachePtrOutput {
	return o.ApplyT(func(v *NexusRepositoryAptProxy) NexusRepositoryAptProxyNegativeCachePtrOutput { return v.NegativeCache }).(NexusRepositoryAptProxyNegativeCachePtrOutput)
}

// Whether this repository accepts incoming requests
func (o NexusRepositoryAptProxyOutput) Online() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NexusRepositoryAptProxy) pulumi.BoolPtrOutput { return v.Online }).(pulumi.BoolPtrOutput)
}

// Configuration for the proxy repository
func (o NexusRepositoryAptProxyOutput) Proxy() NexusRepositoryAptProxyProxyOutput {
	return o.ApplyT(func(v *NexusRepositoryAptProxy) NexusRepositoryAptProxyProxyOutput { return v.Proxy }).(NexusRepositoryAptProxyProxyOutput)
}

// The name of the routing rule assigned to this repository
func (o NexusRepositoryAptProxyOutput) RoutingRule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusRepositoryAptProxy) pulumi.StringPtrOutput { return v.RoutingRule }).(pulumi.StringPtrOutput)
}

// The storage configuration of the repository
func (o NexusRepositoryAptProxyOutput) Storage() NexusRepositoryAptProxyStorageOutput {
	return o.ApplyT(func(v *NexusRepositoryAptProxy) NexusRepositoryAptProxyStorageOutput { return v.Storage }).(NexusRepositoryAptProxyStorageOutput)
}

type NexusRepositoryAptProxyArrayOutput struct{ *pulumi.OutputState }

func (NexusRepositoryAptProxyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusRepositoryAptProxy)(nil)).Elem()
}

func (o NexusRepositoryAptProxyArrayOutput) ToNexusRepositoryAptProxyArrayOutput() NexusRepositoryAptProxyArrayOutput {
	return o
}

func (o NexusRepositoryAptProxyArrayOutput) ToNexusRepositoryAptProxyArrayOutputWithContext(ctx context.Context) NexusRepositoryAptProxyArrayOutput {
	return o
}

func (o NexusRepositoryAptProxyArrayOutput) Index(i pulumi.IntInput) NexusRepositoryAptProxyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NexusRepositoryAptProxy {
		return vs[0].([]*NexusRepositoryAptProxy)[vs[1].(int)]
	}).(NexusRepositoryAptProxyOutput)
}

type NexusRepositoryAptProxyMapOutput struct{ *pulumi.OutputState }

func (NexusRepositoryAptProxyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusRepositoryAptProxy)(nil)).Elem()
}

func (o NexusRepositoryAptProxyMapOutput) ToNexusRepositoryAptProxyMapOutput() NexusRepositoryAptProxyMapOutput {
	return o
}

func (o NexusRepositoryAptProxyMapOutput) ToNexusRepositoryAptProxyMapOutputWithContext(ctx context.Context) NexusRepositoryAptProxyMapOutput {
	return o
}

func (o NexusRepositoryAptProxyMapOutput) MapIndex(k pulumi.StringInput) NexusRepositoryAptProxyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NexusRepositoryAptProxy {
		return vs[0].(map[string]*NexusRepositoryAptProxy)[vs[1].(string)]
	}).(NexusRepositoryAptProxyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NexusRepositoryAptProxyInput)(nil)).Elem(), &NexusRepositoryAptProxy{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusRepositoryAptProxyArrayInput)(nil)).Elem(), NexusRepositoryAptProxyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusRepositoryAptProxyMapInput)(nil)).Elem(), NexusRepositoryAptProxyMap{})
	pulumi.RegisterOutputType(NexusRepositoryAptProxyOutput{})
	pulumi.RegisterOutputType(NexusRepositoryAptProxyArrayOutput{})
	pulumi.RegisterOutputType(NexusRepositoryAptProxyMapOutput{})
}
