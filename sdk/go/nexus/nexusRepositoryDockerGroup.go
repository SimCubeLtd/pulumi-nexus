// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nexus

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NexusRepositoryDockerGroup struct {
	pulumi.CustomResourceState

	// docker contains the configuration of the docker repository
	Docker NexusRepositoryDockerGroupDockerOutput `pulumi:"docker"`
	// Configuration for repository group
	Group NexusRepositoryDockerGroupGroupOutput `pulumi:"group"`
	// A unique identifier for this repository
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether this repository accepts incoming requests
	Online pulumi.BoolPtrOutput `pulumi:"online"`
	// The storage configuration of the repository
	Storage NexusRepositoryDockerGroupStorageOutput `pulumi:"storage"`
}

// NewNexusRepositoryDockerGroup registers a new resource with the given unique name, arguments, and options.
func NewNexusRepositoryDockerGroup(ctx *pulumi.Context,
	name string, args *NexusRepositoryDockerGroupArgs, opts ...pulumi.ResourceOption) (*NexusRepositoryDockerGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Docker == nil {
		return nil, errors.New("invalid value for required argument 'Docker'")
	}
	if args.Group == nil {
		return nil, errors.New("invalid value for required argument 'Group'")
	}
	if args.Storage == nil {
		return nil, errors.New("invalid value for required argument 'Storage'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource NexusRepositoryDockerGroup
	err := ctx.RegisterResource("nexus:index/nexusRepositoryDockerGroup:NexusRepositoryDockerGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNexusRepositoryDockerGroup gets an existing NexusRepositoryDockerGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNexusRepositoryDockerGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NexusRepositoryDockerGroupState, opts ...pulumi.ResourceOption) (*NexusRepositoryDockerGroup, error) {
	var resource NexusRepositoryDockerGroup
	err := ctx.ReadResource("nexus:index/nexusRepositoryDockerGroup:NexusRepositoryDockerGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NexusRepositoryDockerGroup resources.
type nexusRepositoryDockerGroupState struct {
	// docker contains the configuration of the docker repository
	Docker *NexusRepositoryDockerGroupDocker `pulumi:"docker"`
	// Configuration for repository group
	Group *NexusRepositoryDockerGroupGroup `pulumi:"group"`
	// A unique identifier for this repository
	Name *string `pulumi:"name"`
	// Whether this repository accepts incoming requests
	Online *bool `pulumi:"online"`
	// The storage configuration of the repository
	Storage *NexusRepositoryDockerGroupStorage `pulumi:"storage"`
}

type NexusRepositoryDockerGroupState struct {
	// docker contains the configuration of the docker repository
	Docker NexusRepositoryDockerGroupDockerPtrInput
	// Configuration for repository group
	Group NexusRepositoryDockerGroupGroupPtrInput
	// A unique identifier for this repository
	Name pulumi.StringPtrInput
	// Whether this repository accepts incoming requests
	Online pulumi.BoolPtrInput
	// The storage configuration of the repository
	Storage NexusRepositoryDockerGroupStoragePtrInput
}

func (NexusRepositoryDockerGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusRepositoryDockerGroupState)(nil)).Elem()
}

type nexusRepositoryDockerGroupArgs struct {
	// docker contains the configuration of the docker repository
	Docker NexusRepositoryDockerGroupDocker `pulumi:"docker"`
	// Configuration for repository group
	Group NexusRepositoryDockerGroupGroup `pulumi:"group"`
	// A unique identifier for this repository
	Name *string `pulumi:"name"`
	// Whether this repository accepts incoming requests
	Online *bool `pulumi:"online"`
	// The storage configuration of the repository
	Storage NexusRepositoryDockerGroupStorage `pulumi:"storage"`
}

// The set of arguments for constructing a NexusRepositoryDockerGroup resource.
type NexusRepositoryDockerGroupArgs struct {
	// docker contains the configuration of the docker repository
	Docker NexusRepositoryDockerGroupDockerInput
	// Configuration for repository group
	Group NexusRepositoryDockerGroupGroupInput
	// A unique identifier for this repository
	Name pulumi.StringPtrInput
	// Whether this repository accepts incoming requests
	Online pulumi.BoolPtrInput
	// The storage configuration of the repository
	Storage NexusRepositoryDockerGroupStorageInput
}

func (NexusRepositoryDockerGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusRepositoryDockerGroupArgs)(nil)).Elem()
}

type NexusRepositoryDockerGroupInput interface {
	pulumi.Input

	ToNexusRepositoryDockerGroupOutput() NexusRepositoryDockerGroupOutput
	ToNexusRepositoryDockerGroupOutputWithContext(ctx context.Context) NexusRepositoryDockerGroupOutput
}

func (*NexusRepositoryDockerGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusRepositoryDockerGroup)(nil)).Elem()
}

func (i *NexusRepositoryDockerGroup) ToNexusRepositoryDockerGroupOutput() NexusRepositoryDockerGroupOutput {
	return i.ToNexusRepositoryDockerGroupOutputWithContext(context.Background())
}

func (i *NexusRepositoryDockerGroup) ToNexusRepositoryDockerGroupOutputWithContext(ctx context.Context) NexusRepositoryDockerGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusRepositoryDockerGroupOutput)
}

// NexusRepositoryDockerGroupArrayInput is an input type that accepts NexusRepositoryDockerGroupArray and NexusRepositoryDockerGroupArrayOutput values.
// You can construct a concrete instance of `NexusRepositoryDockerGroupArrayInput` via:
//
//          NexusRepositoryDockerGroupArray{ NexusRepositoryDockerGroupArgs{...} }
type NexusRepositoryDockerGroupArrayInput interface {
	pulumi.Input

	ToNexusRepositoryDockerGroupArrayOutput() NexusRepositoryDockerGroupArrayOutput
	ToNexusRepositoryDockerGroupArrayOutputWithContext(context.Context) NexusRepositoryDockerGroupArrayOutput
}

type NexusRepositoryDockerGroupArray []NexusRepositoryDockerGroupInput

func (NexusRepositoryDockerGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusRepositoryDockerGroup)(nil)).Elem()
}

func (i NexusRepositoryDockerGroupArray) ToNexusRepositoryDockerGroupArrayOutput() NexusRepositoryDockerGroupArrayOutput {
	return i.ToNexusRepositoryDockerGroupArrayOutputWithContext(context.Background())
}

func (i NexusRepositoryDockerGroupArray) ToNexusRepositoryDockerGroupArrayOutputWithContext(ctx context.Context) NexusRepositoryDockerGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusRepositoryDockerGroupArrayOutput)
}

// NexusRepositoryDockerGroupMapInput is an input type that accepts NexusRepositoryDockerGroupMap and NexusRepositoryDockerGroupMapOutput values.
// You can construct a concrete instance of `NexusRepositoryDockerGroupMapInput` via:
//
//          NexusRepositoryDockerGroupMap{ "key": NexusRepositoryDockerGroupArgs{...} }
type NexusRepositoryDockerGroupMapInput interface {
	pulumi.Input

	ToNexusRepositoryDockerGroupMapOutput() NexusRepositoryDockerGroupMapOutput
	ToNexusRepositoryDockerGroupMapOutputWithContext(context.Context) NexusRepositoryDockerGroupMapOutput
}

type NexusRepositoryDockerGroupMap map[string]NexusRepositoryDockerGroupInput

func (NexusRepositoryDockerGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusRepositoryDockerGroup)(nil)).Elem()
}

func (i NexusRepositoryDockerGroupMap) ToNexusRepositoryDockerGroupMapOutput() NexusRepositoryDockerGroupMapOutput {
	return i.ToNexusRepositoryDockerGroupMapOutputWithContext(context.Background())
}

func (i NexusRepositoryDockerGroupMap) ToNexusRepositoryDockerGroupMapOutputWithContext(ctx context.Context) NexusRepositoryDockerGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusRepositoryDockerGroupMapOutput)
}

type NexusRepositoryDockerGroupOutput struct{ *pulumi.OutputState }

func (NexusRepositoryDockerGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusRepositoryDockerGroup)(nil)).Elem()
}

func (o NexusRepositoryDockerGroupOutput) ToNexusRepositoryDockerGroupOutput() NexusRepositoryDockerGroupOutput {
	return o
}

func (o NexusRepositoryDockerGroupOutput) ToNexusRepositoryDockerGroupOutputWithContext(ctx context.Context) NexusRepositoryDockerGroupOutput {
	return o
}

// docker contains the configuration of the docker repository
func (o NexusRepositoryDockerGroupOutput) Docker() NexusRepositoryDockerGroupDockerOutput {
	return o.ApplyT(func(v *NexusRepositoryDockerGroup) NexusRepositoryDockerGroupDockerOutput { return v.Docker }).(NexusRepositoryDockerGroupDockerOutput)
}

// Configuration for repository group
func (o NexusRepositoryDockerGroupOutput) Group() NexusRepositoryDockerGroupGroupOutput {
	return o.ApplyT(func(v *NexusRepositoryDockerGroup) NexusRepositoryDockerGroupGroupOutput { return v.Group }).(NexusRepositoryDockerGroupGroupOutput)
}

// A unique identifier for this repository
func (o NexusRepositoryDockerGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusRepositoryDockerGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Whether this repository accepts incoming requests
func (o NexusRepositoryDockerGroupOutput) Online() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NexusRepositoryDockerGroup) pulumi.BoolPtrOutput { return v.Online }).(pulumi.BoolPtrOutput)
}

// The storage configuration of the repository
func (o NexusRepositoryDockerGroupOutput) Storage() NexusRepositoryDockerGroupStorageOutput {
	return o.ApplyT(func(v *NexusRepositoryDockerGroup) NexusRepositoryDockerGroupStorageOutput { return v.Storage }).(NexusRepositoryDockerGroupStorageOutput)
}

type NexusRepositoryDockerGroupArrayOutput struct{ *pulumi.OutputState }

func (NexusRepositoryDockerGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusRepositoryDockerGroup)(nil)).Elem()
}

func (o NexusRepositoryDockerGroupArrayOutput) ToNexusRepositoryDockerGroupArrayOutput() NexusRepositoryDockerGroupArrayOutput {
	return o
}

func (o NexusRepositoryDockerGroupArrayOutput) ToNexusRepositoryDockerGroupArrayOutputWithContext(ctx context.Context) NexusRepositoryDockerGroupArrayOutput {
	return o
}

func (o NexusRepositoryDockerGroupArrayOutput) Index(i pulumi.IntInput) NexusRepositoryDockerGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NexusRepositoryDockerGroup {
		return vs[0].([]*NexusRepositoryDockerGroup)[vs[1].(int)]
	}).(NexusRepositoryDockerGroupOutput)
}

type NexusRepositoryDockerGroupMapOutput struct{ *pulumi.OutputState }

func (NexusRepositoryDockerGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusRepositoryDockerGroup)(nil)).Elem()
}

func (o NexusRepositoryDockerGroupMapOutput) ToNexusRepositoryDockerGroupMapOutput() NexusRepositoryDockerGroupMapOutput {
	return o
}

func (o NexusRepositoryDockerGroupMapOutput) ToNexusRepositoryDockerGroupMapOutputWithContext(ctx context.Context) NexusRepositoryDockerGroupMapOutput {
	return o
}

func (o NexusRepositoryDockerGroupMapOutput) MapIndex(k pulumi.StringInput) NexusRepositoryDockerGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NexusRepositoryDockerGroup {
		return vs[0].(map[string]*NexusRepositoryDockerGroup)[vs[1].(string)]
	}).(NexusRepositoryDockerGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NexusRepositoryDockerGroupInput)(nil)).Elem(), &NexusRepositoryDockerGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusRepositoryDockerGroupArrayInput)(nil)).Elem(), NexusRepositoryDockerGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusRepositoryDockerGroupMapInput)(nil)).Elem(), NexusRepositoryDockerGroupMap{})
	pulumi.RegisterOutputType(NexusRepositoryDockerGroupOutput{})
	pulumi.RegisterOutputType(NexusRepositoryDockerGroupArrayOutput{})
	pulumi.RegisterOutputType(NexusRepositoryDockerGroupMapOutput{})
}
