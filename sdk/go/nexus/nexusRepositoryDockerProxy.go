// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nexus

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NexusRepositoryDockerProxy struct {
	pulumi.CustomResourceState

	// Cleanup policies
	Cleanups NexusRepositoryDockerProxyCleanupArrayOutput `pulumi:"cleanups"`
	// docker contains the configuration of the docker repository
	Docker NexusRepositoryDockerProxyDockerOutput `pulumi:"docker"`
	// docker_proxy contains the configuration of the docker index
	DockerProxy NexusRepositoryDockerProxyDockerProxyOutput `pulumi:"dockerProxy"`
	// HTTP Client configuration for proxy repositories. Required for docker proxy repositories
	HttpClient NexusRepositoryDockerProxyHttpClientPtrOutput `pulumi:"httpClient"`
	// A unique identifier for this repository
	Name pulumi.StringOutput `pulumi:"name"`
	// Configuration of the negative cache handling
	NegativeCache NexusRepositoryDockerProxyNegativeCachePtrOutput `pulumi:"negativeCache"`
	// Whether this repository accepts incoming requests
	Online pulumi.BoolPtrOutput `pulumi:"online"`
	// Configuration for the proxy repository
	Proxy NexusRepositoryDockerProxyProxyOutput `pulumi:"proxy"`
	// The name of the routing rule assigned to this repository
	RoutingRule pulumi.StringPtrOutput `pulumi:"routingRule"`
	// The storage configuration of the repository
	Storage NexusRepositoryDockerProxyStorageOutput `pulumi:"storage"`
}

// NewNexusRepositoryDockerProxy registers a new resource with the given unique name, arguments, and options.
func NewNexusRepositoryDockerProxy(ctx *pulumi.Context,
	name string, args *NexusRepositoryDockerProxyArgs, opts ...pulumi.ResourceOption) (*NexusRepositoryDockerProxy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Docker == nil {
		return nil, errors.New("invalid value for required argument 'Docker'")
	}
	if args.DockerProxy == nil {
		return nil, errors.New("invalid value for required argument 'DockerProxy'")
	}
	if args.Proxy == nil {
		return nil, errors.New("invalid value for required argument 'Proxy'")
	}
	if args.Storage == nil {
		return nil, errors.New("invalid value for required argument 'Storage'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource NexusRepositoryDockerProxy
	err := ctx.RegisterResource("nexus:index/nexusRepositoryDockerProxy:NexusRepositoryDockerProxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNexusRepositoryDockerProxy gets an existing NexusRepositoryDockerProxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNexusRepositoryDockerProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NexusRepositoryDockerProxyState, opts ...pulumi.ResourceOption) (*NexusRepositoryDockerProxy, error) {
	var resource NexusRepositoryDockerProxy
	err := ctx.ReadResource("nexus:index/nexusRepositoryDockerProxy:NexusRepositoryDockerProxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NexusRepositoryDockerProxy resources.
type nexusRepositoryDockerProxyState struct {
	// Cleanup policies
	Cleanups []NexusRepositoryDockerProxyCleanup `pulumi:"cleanups"`
	// docker contains the configuration of the docker repository
	Docker *NexusRepositoryDockerProxyDocker `pulumi:"docker"`
	// docker_proxy contains the configuration of the docker index
	DockerProxy *NexusRepositoryDockerProxyDockerProxy `pulumi:"dockerProxy"`
	// HTTP Client configuration for proxy repositories. Required for docker proxy repositories
	HttpClient *NexusRepositoryDockerProxyHttpClient `pulumi:"httpClient"`
	// A unique identifier for this repository
	Name *string `pulumi:"name"`
	// Configuration of the negative cache handling
	NegativeCache *NexusRepositoryDockerProxyNegativeCache `pulumi:"negativeCache"`
	// Whether this repository accepts incoming requests
	Online *bool `pulumi:"online"`
	// Configuration for the proxy repository
	Proxy *NexusRepositoryDockerProxyProxy `pulumi:"proxy"`
	// The name of the routing rule assigned to this repository
	RoutingRule *string `pulumi:"routingRule"`
	// The storage configuration of the repository
	Storage *NexusRepositoryDockerProxyStorage `pulumi:"storage"`
}

type NexusRepositoryDockerProxyState struct {
	// Cleanup policies
	Cleanups NexusRepositoryDockerProxyCleanupArrayInput
	// docker contains the configuration of the docker repository
	Docker NexusRepositoryDockerProxyDockerPtrInput
	// docker_proxy contains the configuration of the docker index
	DockerProxy NexusRepositoryDockerProxyDockerProxyPtrInput
	// HTTP Client configuration for proxy repositories. Required for docker proxy repositories
	HttpClient NexusRepositoryDockerProxyHttpClientPtrInput
	// A unique identifier for this repository
	Name pulumi.StringPtrInput
	// Configuration of the negative cache handling
	NegativeCache NexusRepositoryDockerProxyNegativeCachePtrInput
	// Whether this repository accepts incoming requests
	Online pulumi.BoolPtrInput
	// Configuration for the proxy repository
	Proxy NexusRepositoryDockerProxyProxyPtrInput
	// The name of the routing rule assigned to this repository
	RoutingRule pulumi.StringPtrInput
	// The storage configuration of the repository
	Storage NexusRepositoryDockerProxyStoragePtrInput
}

func (NexusRepositoryDockerProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusRepositoryDockerProxyState)(nil)).Elem()
}

type nexusRepositoryDockerProxyArgs struct {
	// Cleanup policies
	Cleanups []NexusRepositoryDockerProxyCleanup `pulumi:"cleanups"`
	// docker contains the configuration of the docker repository
	Docker NexusRepositoryDockerProxyDocker `pulumi:"docker"`
	// docker_proxy contains the configuration of the docker index
	DockerProxy NexusRepositoryDockerProxyDockerProxy `pulumi:"dockerProxy"`
	// HTTP Client configuration for proxy repositories. Required for docker proxy repositories
	HttpClient *NexusRepositoryDockerProxyHttpClient `pulumi:"httpClient"`
	// A unique identifier for this repository
	Name *string `pulumi:"name"`
	// Configuration of the negative cache handling
	NegativeCache *NexusRepositoryDockerProxyNegativeCache `pulumi:"negativeCache"`
	// Whether this repository accepts incoming requests
	Online *bool `pulumi:"online"`
	// Configuration for the proxy repository
	Proxy NexusRepositoryDockerProxyProxy `pulumi:"proxy"`
	// The name of the routing rule assigned to this repository
	RoutingRule *string `pulumi:"routingRule"`
	// The storage configuration of the repository
	Storage NexusRepositoryDockerProxyStorage `pulumi:"storage"`
}

// The set of arguments for constructing a NexusRepositoryDockerProxy resource.
type NexusRepositoryDockerProxyArgs struct {
	// Cleanup policies
	Cleanups NexusRepositoryDockerProxyCleanupArrayInput
	// docker contains the configuration of the docker repository
	Docker NexusRepositoryDockerProxyDockerInput
	// docker_proxy contains the configuration of the docker index
	DockerProxy NexusRepositoryDockerProxyDockerProxyInput
	// HTTP Client configuration for proxy repositories. Required for docker proxy repositories
	HttpClient NexusRepositoryDockerProxyHttpClientPtrInput
	// A unique identifier for this repository
	Name pulumi.StringPtrInput
	// Configuration of the negative cache handling
	NegativeCache NexusRepositoryDockerProxyNegativeCachePtrInput
	// Whether this repository accepts incoming requests
	Online pulumi.BoolPtrInput
	// Configuration for the proxy repository
	Proxy NexusRepositoryDockerProxyProxyInput
	// The name of the routing rule assigned to this repository
	RoutingRule pulumi.StringPtrInput
	// The storage configuration of the repository
	Storage NexusRepositoryDockerProxyStorageInput
}

func (NexusRepositoryDockerProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusRepositoryDockerProxyArgs)(nil)).Elem()
}

type NexusRepositoryDockerProxyInput interface {
	pulumi.Input

	ToNexusRepositoryDockerProxyOutput() NexusRepositoryDockerProxyOutput
	ToNexusRepositoryDockerProxyOutputWithContext(ctx context.Context) NexusRepositoryDockerProxyOutput
}

func (*NexusRepositoryDockerProxy) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusRepositoryDockerProxy)(nil)).Elem()
}

func (i *NexusRepositoryDockerProxy) ToNexusRepositoryDockerProxyOutput() NexusRepositoryDockerProxyOutput {
	return i.ToNexusRepositoryDockerProxyOutputWithContext(context.Background())
}

func (i *NexusRepositoryDockerProxy) ToNexusRepositoryDockerProxyOutputWithContext(ctx context.Context) NexusRepositoryDockerProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusRepositoryDockerProxyOutput)
}

// NexusRepositoryDockerProxyArrayInput is an input type that accepts NexusRepositoryDockerProxyArray and NexusRepositoryDockerProxyArrayOutput values.
// You can construct a concrete instance of `NexusRepositoryDockerProxyArrayInput` via:
//
//          NexusRepositoryDockerProxyArray{ NexusRepositoryDockerProxyArgs{...} }
type NexusRepositoryDockerProxyArrayInput interface {
	pulumi.Input

	ToNexusRepositoryDockerProxyArrayOutput() NexusRepositoryDockerProxyArrayOutput
	ToNexusRepositoryDockerProxyArrayOutputWithContext(context.Context) NexusRepositoryDockerProxyArrayOutput
}

type NexusRepositoryDockerProxyArray []NexusRepositoryDockerProxyInput

func (NexusRepositoryDockerProxyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusRepositoryDockerProxy)(nil)).Elem()
}

func (i NexusRepositoryDockerProxyArray) ToNexusRepositoryDockerProxyArrayOutput() NexusRepositoryDockerProxyArrayOutput {
	return i.ToNexusRepositoryDockerProxyArrayOutputWithContext(context.Background())
}

func (i NexusRepositoryDockerProxyArray) ToNexusRepositoryDockerProxyArrayOutputWithContext(ctx context.Context) NexusRepositoryDockerProxyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusRepositoryDockerProxyArrayOutput)
}

// NexusRepositoryDockerProxyMapInput is an input type that accepts NexusRepositoryDockerProxyMap and NexusRepositoryDockerProxyMapOutput values.
// You can construct a concrete instance of `NexusRepositoryDockerProxyMapInput` via:
//
//          NexusRepositoryDockerProxyMap{ "key": NexusRepositoryDockerProxyArgs{...} }
type NexusRepositoryDockerProxyMapInput interface {
	pulumi.Input

	ToNexusRepositoryDockerProxyMapOutput() NexusRepositoryDockerProxyMapOutput
	ToNexusRepositoryDockerProxyMapOutputWithContext(context.Context) NexusRepositoryDockerProxyMapOutput
}

type NexusRepositoryDockerProxyMap map[string]NexusRepositoryDockerProxyInput

func (NexusRepositoryDockerProxyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusRepositoryDockerProxy)(nil)).Elem()
}

func (i NexusRepositoryDockerProxyMap) ToNexusRepositoryDockerProxyMapOutput() NexusRepositoryDockerProxyMapOutput {
	return i.ToNexusRepositoryDockerProxyMapOutputWithContext(context.Background())
}

func (i NexusRepositoryDockerProxyMap) ToNexusRepositoryDockerProxyMapOutputWithContext(ctx context.Context) NexusRepositoryDockerProxyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusRepositoryDockerProxyMapOutput)
}

type NexusRepositoryDockerProxyOutput struct{ *pulumi.OutputState }

func (NexusRepositoryDockerProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusRepositoryDockerProxy)(nil)).Elem()
}

func (o NexusRepositoryDockerProxyOutput) ToNexusRepositoryDockerProxyOutput() NexusRepositoryDockerProxyOutput {
	return o
}

func (o NexusRepositoryDockerProxyOutput) ToNexusRepositoryDockerProxyOutputWithContext(ctx context.Context) NexusRepositoryDockerProxyOutput {
	return o
}

// Cleanup policies
func (o NexusRepositoryDockerProxyOutput) Cleanups() NexusRepositoryDockerProxyCleanupArrayOutput {
	return o.ApplyT(func(v *NexusRepositoryDockerProxy) NexusRepositoryDockerProxyCleanupArrayOutput { return v.Cleanups }).(NexusRepositoryDockerProxyCleanupArrayOutput)
}

// docker contains the configuration of the docker repository
func (o NexusRepositoryDockerProxyOutput) Docker() NexusRepositoryDockerProxyDockerOutput {
	return o.ApplyT(func(v *NexusRepositoryDockerProxy) NexusRepositoryDockerProxyDockerOutput { return v.Docker }).(NexusRepositoryDockerProxyDockerOutput)
}

// docker_proxy contains the configuration of the docker index
func (o NexusRepositoryDockerProxyOutput) DockerProxy() NexusRepositoryDockerProxyDockerProxyOutput {
	return o.ApplyT(func(v *NexusRepositoryDockerProxy) NexusRepositoryDockerProxyDockerProxyOutput { return v.DockerProxy }).(NexusRepositoryDockerProxyDockerProxyOutput)
}

// HTTP Client configuration for proxy repositories. Required for docker proxy repositories
func (o NexusRepositoryDockerProxyOutput) HttpClient() NexusRepositoryDockerProxyHttpClientPtrOutput {
	return o.ApplyT(func(v *NexusRepositoryDockerProxy) NexusRepositoryDockerProxyHttpClientPtrOutput { return v.HttpClient }).(NexusRepositoryDockerProxyHttpClientPtrOutput)
}

// A unique identifier for this repository
func (o NexusRepositoryDockerProxyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusRepositoryDockerProxy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Configuration of the negative cache handling
func (o NexusRepositoryDockerProxyOutput) NegativeCache() NexusRepositoryDockerProxyNegativeCachePtrOutput {
	return o.ApplyT(func(v *NexusRepositoryDockerProxy) NexusRepositoryDockerProxyNegativeCachePtrOutput {
		return v.NegativeCache
	}).(NexusRepositoryDockerProxyNegativeCachePtrOutput)
}

// Whether this repository accepts incoming requests
func (o NexusRepositoryDockerProxyOutput) Online() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NexusRepositoryDockerProxy) pulumi.BoolPtrOutput { return v.Online }).(pulumi.BoolPtrOutput)
}

// Configuration for the proxy repository
func (o NexusRepositoryDockerProxyOutput) Proxy() NexusRepositoryDockerProxyProxyOutput {
	return o.ApplyT(func(v *NexusRepositoryDockerProxy) NexusRepositoryDockerProxyProxyOutput { return v.Proxy }).(NexusRepositoryDockerProxyProxyOutput)
}

// The name of the routing rule assigned to this repository
func (o NexusRepositoryDockerProxyOutput) RoutingRule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusRepositoryDockerProxy) pulumi.StringPtrOutput { return v.RoutingRule }).(pulumi.StringPtrOutput)
}

// The storage configuration of the repository
func (o NexusRepositoryDockerProxyOutput) Storage() NexusRepositoryDockerProxyStorageOutput {
	return o.ApplyT(func(v *NexusRepositoryDockerProxy) NexusRepositoryDockerProxyStorageOutput { return v.Storage }).(NexusRepositoryDockerProxyStorageOutput)
}

type NexusRepositoryDockerProxyArrayOutput struct{ *pulumi.OutputState }

func (NexusRepositoryDockerProxyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusRepositoryDockerProxy)(nil)).Elem()
}

func (o NexusRepositoryDockerProxyArrayOutput) ToNexusRepositoryDockerProxyArrayOutput() NexusRepositoryDockerProxyArrayOutput {
	return o
}

func (o NexusRepositoryDockerProxyArrayOutput) ToNexusRepositoryDockerProxyArrayOutputWithContext(ctx context.Context) NexusRepositoryDockerProxyArrayOutput {
	return o
}

func (o NexusRepositoryDockerProxyArrayOutput) Index(i pulumi.IntInput) NexusRepositoryDockerProxyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NexusRepositoryDockerProxy {
		return vs[0].([]*NexusRepositoryDockerProxy)[vs[1].(int)]
	}).(NexusRepositoryDockerProxyOutput)
}

type NexusRepositoryDockerProxyMapOutput struct{ *pulumi.OutputState }

func (NexusRepositoryDockerProxyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusRepositoryDockerProxy)(nil)).Elem()
}

func (o NexusRepositoryDockerProxyMapOutput) ToNexusRepositoryDockerProxyMapOutput() NexusRepositoryDockerProxyMapOutput {
	return o
}

func (o NexusRepositoryDockerProxyMapOutput) ToNexusRepositoryDockerProxyMapOutputWithContext(ctx context.Context) NexusRepositoryDockerProxyMapOutput {
	return o
}

func (o NexusRepositoryDockerProxyMapOutput) MapIndex(k pulumi.StringInput) NexusRepositoryDockerProxyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NexusRepositoryDockerProxy {
		return vs[0].(map[string]*NexusRepositoryDockerProxy)[vs[1].(string)]
	}).(NexusRepositoryDockerProxyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NexusRepositoryDockerProxyInput)(nil)).Elem(), &NexusRepositoryDockerProxy{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusRepositoryDockerProxyArrayInput)(nil)).Elem(), NexusRepositoryDockerProxyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusRepositoryDockerProxyMapInput)(nil)).Elem(), NexusRepositoryDockerProxyMap{})
	pulumi.RegisterOutputType(NexusRepositoryDockerProxyOutput{})
	pulumi.RegisterOutputType(NexusRepositoryDockerProxyArrayOutput{})
	pulumi.RegisterOutputType(NexusRepositoryDockerProxyMapOutput{})
}
