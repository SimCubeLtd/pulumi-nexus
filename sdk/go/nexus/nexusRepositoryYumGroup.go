// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nexus

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NexusRepositoryYumGroup struct {
	pulumi.CustomResourceState

	// Configuration for repository group
	Group NexusRepositoryYumGroupGroupOutput `pulumi:"group"`
	// A unique identifier for this repository
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether this repository accepts incoming requests
	Online pulumi.BoolPtrOutput `pulumi:"online"`
	// The storage configuration of the repository
	Storage NexusRepositoryYumGroupStorageOutput `pulumi:"storage"`
	// Contains signing data of repositores
	YumSigning NexusRepositoryYumGroupYumSigningPtrOutput `pulumi:"yumSigning"`
}

// NewNexusRepositoryYumGroup registers a new resource with the given unique name, arguments, and options.
func NewNexusRepositoryYumGroup(ctx *pulumi.Context,
	name string, args *NexusRepositoryYumGroupArgs, opts ...pulumi.ResourceOption) (*NexusRepositoryYumGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Group == nil {
		return nil, errors.New("invalid value for required argument 'Group'")
	}
	if args.Storage == nil {
		return nil, errors.New("invalid value for required argument 'Storage'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource NexusRepositoryYumGroup
	err := ctx.RegisterResource("nexus:index/nexusRepositoryYumGroup:NexusRepositoryYumGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNexusRepositoryYumGroup gets an existing NexusRepositoryYumGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNexusRepositoryYumGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NexusRepositoryYumGroupState, opts ...pulumi.ResourceOption) (*NexusRepositoryYumGroup, error) {
	var resource NexusRepositoryYumGroup
	err := ctx.ReadResource("nexus:index/nexusRepositoryYumGroup:NexusRepositoryYumGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NexusRepositoryYumGroup resources.
type nexusRepositoryYumGroupState struct {
	// Configuration for repository group
	Group *NexusRepositoryYumGroupGroup `pulumi:"group"`
	// A unique identifier for this repository
	Name *string `pulumi:"name"`
	// Whether this repository accepts incoming requests
	Online *bool `pulumi:"online"`
	// The storage configuration of the repository
	Storage *NexusRepositoryYumGroupStorage `pulumi:"storage"`
	// Contains signing data of repositores
	YumSigning *NexusRepositoryYumGroupYumSigning `pulumi:"yumSigning"`
}

type NexusRepositoryYumGroupState struct {
	// Configuration for repository group
	Group NexusRepositoryYumGroupGroupPtrInput
	// A unique identifier for this repository
	Name pulumi.StringPtrInput
	// Whether this repository accepts incoming requests
	Online pulumi.BoolPtrInput
	// The storage configuration of the repository
	Storage NexusRepositoryYumGroupStoragePtrInput
	// Contains signing data of repositores
	YumSigning NexusRepositoryYumGroupYumSigningPtrInput
}

func (NexusRepositoryYumGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusRepositoryYumGroupState)(nil)).Elem()
}

type nexusRepositoryYumGroupArgs struct {
	// Configuration for repository group
	Group NexusRepositoryYumGroupGroup `pulumi:"group"`
	// A unique identifier for this repository
	Name *string `pulumi:"name"`
	// Whether this repository accepts incoming requests
	Online *bool `pulumi:"online"`
	// The storage configuration of the repository
	Storage NexusRepositoryYumGroupStorage `pulumi:"storage"`
	// Contains signing data of repositores
	YumSigning *NexusRepositoryYumGroupYumSigning `pulumi:"yumSigning"`
}

// The set of arguments for constructing a NexusRepositoryYumGroup resource.
type NexusRepositoryYumGroupArgs struct {
	// Configuration for repository group
	Group NexusRepositoryYumGroupGroupInput
	// A unique identifier for this repository
	Name pulumi.StringPtrInput
	// Whether this repository accepts incoming requests
	Online pulumi.BoolPtrInput
	// The storage configuration of the repository
	Storage NexusRepositoryYumGroupStorageInput
	// Contains signing data of repositores
	YumSigning NexusRepositoryYumGroupYumSigningPtrInput
}

func (NexusRepositoryYumGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusRepositoryYumGroupArgs)(nil)).Elem()
}

type NexusRepositoryYumGroupInput interface {
	pulumi.Input

	ToNexusRepositoryYumGroupOutput() NexusRepositoryYumGroupOutput
	ToNexusRepositoryYumGroupOutputWithContext(ctx context.Context) NexusRepositoryYumGroupOutput
}

func (*NexusRepositoryYumGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusRepositoryYumGroup)(nil)).Elem()
}

func (i *NexusRepositoryYumGroup) ToNexusRepositoryYumGroupOutput() NexusRepositoryYumGroupOutput {
	return i.ToNexusRepositoryYumGroupOutputWithContext(context.Background())
}

func (i *NexusRepositoryYumGroup) ToNexusRepositoryYumGroupOutputWithContext(ctx context.Context) NexusRepositoryYumGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusRepositoryYumGroupOutput)
}

// NexusRepositoryYumGroupArrayInput is an input type that accepts NexusRepositoryYumGroupArray and NexusRepositoryYumGroupArrayOutput values.
// You can construct a concrete instance of `NexusRepositoryYumGroupArrayInput` via:
//
//          NexusRepositoryYumGroupArray{ NexusRepositoryYumGroupArgs{...} }
type NexusRepositoryYumGroupArrayInput interface {
	pulumi.Input

	ToNexusRepositoryYumGroupArrayOutput() NexusRepositoryYumGroupArrayOutput
	ToNexusRepositoryYumGroupArrayOutputWithContext(context.Context) NexusRepositoryYumGroupArrayOutput
}

type NexusRepositoryYumGroupArray []NexusRepositoryYumGroupInput

func (NexusRepositoryYumGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusRepositoryYumGroup)(nil)).Elem()
}

func (i NexusRepositoryYumGroupArray) ToNexusRepositoryYumGroupArrayOutput() NexusRepositoryYumGroupArrayOutput {
	return i.ToNexusRepositoryYumGroupArrayOutputWithContext(context.Background())
}

func (i NexusRepositoryYumGroupArray) ToNexusRepositoryYumGroupArrayOutputWithContext(ctx context.Context) NexusRepositoryYumGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusRepositoryYumGroupArrayOutput)
}

// NexusRepositoryYumGroupMapInput is an input type that accepts NexusRepositoryYumGroupMap and NexusRepositoryYumGroupMapOutput values.
// You can construct a concrete instance of `NexusRepositoryYumGroupMapInput` via:
//
//          NexusRepositoryYumGroupMap{ "key": NexusRepositoryYumGroupArgs{...} }
type NexusRepositoryYumGroupMapInput interface {
	pulumi.Input

	ToNexusRepositoryYumGroupMapOutput() NexusRepositoryYumGroupMapOutput
	ToNexusRepositoryYumGroupMapOutputWithContext(context.Context) NexusRepositoryYumGroupMapOutput
}

type NexusRepositoryYumGroupMap map[string]NexusRepositoryYumGroupInput

func (NexusRepositoryYumGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusRepositoryYumGroup)(nil)).Elem()
}

func (i NexusRepositoryYumGroupMap) ToNexusRepositoryYumGroupMapOutput() NexusRepositoryYumGroupMapOutput {
	return i.ToNexusRepositoryYumGroupMapOutputWithContext(context.Background())
}

func (i NexusRepositoryYumGroupMap) ToNexusRepositoryYumGroupMapOutputWithContext(ctx context.Context) NexusRepositoryYumGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusRepositoryYumGroupMapOutput)
}

type NexusRepositoryYumGroupOutput struct{ *pulumi.OutputState }

func (NexusRepositoryYumGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusRepositoryYumGroup)(nil)).Elem()
}

func (o NexusRepositoryYumGroupOutput) ToNexusRepositoryYumGroupOutput() NexusRepositoryYumGroupOutput {
	return o
}

func (o NexusRepositoryYumGroupOutput) ToNexusRepositoryYumGroupOutputWithContext(ctx context.Context) NexusRepositoryYumGroupOutput {
	return o
}

// Configuration for repository group
func (o NexusRepositoryYumGroupOutput) Group() NexusRepositoryYumGroupGroupOutput {
	return o.ApplyT(func(v *NexusRepositoryYumGroup) NexusRepositoryYumGroupGroupOutput { return v.Group }).(NexusRepositoryYumGroupGroupOutput)
}

// A unique identifier for this repository
func (o NexusRepositoryYumGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusRepositoryYumGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Whether this repository accepts incoming requests
func (o NexusRepositoryYumGroupOutput) Online() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NexusRepositoryYumGroup) pulumi.BoolPtrOutput { return v.Online }).(pulumi.BoolPtrOutput)
}

// The storage configuration of the repository
func (o NexusRepositoryYumGroupOutput) Storage() NexusRepositoryYumGroupStorageOutput {
	return o.ApplyT(func(v *NexusRepositoryYumGroup) NexusRepositoryYumGroupStorageOutput { return v.Storage }).(NexusRepositoryYumGroupStorageOutput)
}

// Contains signing data of repositores
func (o NexusRepositoryYumGroupOutput) YumSigning() NexusRepositoryYumGroupYumSigningPtrOutput {
	return o.ApplyT(func(v *NexusRepositoryYumGroup) NexusRepositoryYumGroupYumSigningPtrOutput { return v.YumSigning }).(NexusRepositoryYumGroupYumSigningPtrOutput)
}

type NexusRepositoryYumGroupArrayOutput struct{ *pulumi.OutputState }

func (NexusRepositoryYumGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusRepositoryYumGroup)(nil)).Elem()
}

func (o NexusRepositoryYumGroupArrayOutput) ToNexusRepositoryYumGroupArrayOutput() NexusRepositoryYumGroupArrayOutput {
	return o
}

func (o NexusRepositoryYumGroupArrayOutput) ToNexusRepositoryYumGroupArrayOutputWithContext(ctx context.Context) NexusRepositoryYumGroupArrayOutput {
	return o
}

func (o NexusRepositoryYumGroupArrayOutput) Index(i pulumi.IntInput) NexusRepositoryYumGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NexusRepositoryYumGroup {
		return vs[0].([]*NexusRepositoryYumGroup)[vs[1].(int)]
	}).(NexusRepositoryYumGroupOutput)
}

type NexusRepositoryYumGroupMapOutput struct{ *pulumi.OutputState }

func (NexusRepositoryYumGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusRepositoryYumGroup)(nil)).Elem()
}

func (o NexusRepositoryYumGroupMapOutput) ToNexusRepositoryYumGroupMapOutput() NexusRepositoryYumGroupMapOutput {
	return o
}

func (o NexusRepositoryYumGroupMapOutput) ToNexusRepositoryYumGroupMapOutputWithContext(ctx context.Context) NexusRepositoryYumGroupMapOutput {
	return o
}

func (o NexusRepositoryYumGroupMapOutput) MapIndex(k pulumi.StringInput) NexusRepositoryYumGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NexusRepositoryYumGroup {
		return vs[0].(map[string]*NexusRepositoryYumGroup)[vs[1].(string)]
	}).(NexusRepositoryYumGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NexusRepositoryYumGroupInput)(nil)).Elem(), &NexusRepositoryYumGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusRepositoryYumGroupArrayInput)(nil)).Elem(), NexusRepositoryYumGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusRepositoryYumGroupMapInput)(nil)).Elem(), NexusRepositoryYumGroupMap{})
	pulumi.RegisterOutputType(NexusRepositoryYumGroupOutput{})
	pulumi.RegisterOutputType(NexusRepositoryYumGroupArrayOutput{})
	pulumi.RegisterOutputType(NexusRepositoryYumGroupMapOutput{})
}
