// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nexus

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NexusRepositoryYumProxy struct {
	pulumi.CustomResourceState

	// Cleanup policies
	Cleanups NexusRepositoryYumProxyCleanupArrayOutput `pulumi:"cleanups"`
	// HTTP Client configuration for proxy repositories. Required for docker proxy repositories
	HttpClient NexusRepositoryYumProxyHttpClientPtrOutput `pulumi:"httpClient"`
	// A unique identifier for this repository
	Name pulumi.StringOutput `pulumi:"name"`
	// Configuration of the negative cache handling
	NegativeCache NexusRepositoryYumProxyNegativeCachePtrOutput `pulumi:"negativeCache"`
	// Whether this repository accepts incoming requests
	Online pulumi.BoolPtrOutput `pulumi:"online"`
	// Configuration for the proxy repository
	Proxy NexusRepositoryYumProxyProxyOutput `pulumi:"proxy"`
	// The name of the routing rule assigned to this repository
	RoutingRule pulumi.StringPtrOutput `pulumi:"routingRule"`
	// The storage configuration of the repository
	Storage NexusRepositoryYumProxyStorageOutput `pulumi:"storage"`
	// Contains signing data of repositores
	YumSigning NexusRepositoryYumProxyYumSigningPtrOutput `pulumi:"yumSigning"`
}

// NewNexusRepositoryYumProxy registers a new resource with the given unique name, arguments, and options.
func NewNexusRepositoryYumProxy(ctx *pulumi.Context,
	name string, args *NexusRepositoryYumProxyArgs, opts ...pulumi.ResourceOption) (*NexusRepositoryYumProxy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Proxy == nil {
		return nil, errors.New("invalid value for required argument 'Proxy'")
	}
	if args.Storage == nil {
		return nil, errors.New("invalid value for required argument 'Storage'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource NexusRepositoryYumProxy
	err := ctx.RegisterResource("nexus:index/nexusRepositoryYumProxy:NexusRepositoryYumProxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNexusRepositoryYumProxy gets an existing NexusRepositoryYumProxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNexusRepositoryYumProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NexusRepositoryYumProxyState, opts ...pulumi.ResourceOption) (*NexusRepositoryYumProxy, error) {
	var resource NexusRepositoryYumProxy
	err := ctx.ReadResource("nexus:index/nexusRepositoryYumProxy:NexusRepositoryYumProxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NexusRepositoryYumProxy resources.
type nexusRepositoryYumProxyState struct {
	// Cleanup policies
	Cleanups []NexusRepositoryYumProxyCleanup `pulumi:"cleanups"`
	// HTTP Client configuration for proxy repositories. Required for docker proxy repositories
	HttpClient *NexusRepositoryYumProxyHttpClient `pulumi:"httpClient"`
	// A unique identifier for this repository
	Name *string `pulumi:"name"`
	// Configuration of the negative cache handling
	NegativeCache *NexusRepositoryYumProxyNegativeCache `pulumi:"negativeCache"`
	// Whether this repository accepts incoming requests
	Online *bool `pulumi:"online"`
	// Configuration for the proxy repository
	Proxy *NexusRepositoryYumProxyProxy `pulumi:"proxy"`
	// The name of the routing rule assigned to this repository
	RoutingRule *string `pulumi:"routingRule"`
	// The storage configuration of the repository
	Storage *NexusRepositoryYumProxyStorage `pulumi:"storage"`
	// Contains signing data of repositores
	YumSigning *NexusRepositoryYumProxyYumSigning `pulumi:"yumSigning"`
}

type NexusRepositoryYumProxyState struct {
	// Cleanup policies
	Cleanups NexusRepositoryYumProxyCleanupArrayInput
	// HTTP Client configuration for proxy repositories. Required for docker proxy repositories
	HttpClient NexusRepositoryYumProxyHttpClientPtrInput
	// A unique identifier for this repository
	Name pulumi.StringPtrInput
	// Configuration of the negative cache handling
	NegativeCache NexusRepositoryYumProxyNegativeCachePtrInput
	// Whether this repository accepts incoming requests
	Online pulumi.BoolPtrInput
	// Configuration for the proxy repository
	Proxy NexusRepositoryYumProxyProxyPtrInput
	// The name of the routing rule assigned to this repository
	RoutingRule pulumi.StringPtrInput
	// The storage configuration of the repository
	Storage NexusRepositoryYumProxyStoragePtrInput
	// Contains signing data of repositores
	YumSigning NexusRepositoryYumProxyYumSigningPtrInput
}

func (NexusRepositoryYumProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusRepositoryYumProxyState)(nil)).Elem()
}

type nexusRepositoryYumProxyArgs struct {
	// Cleanup policies
	Cleanups []NexusRepositoryYumProxyCleanup `pulumi:"cleanups"`
	// HTTP Client configuration for proxy repositories. Required for docker proxy repositories
	HttpClient *NexusRepositoryYumProxyHttpClient `pulumi:"httpClient"`
	// A unique identifier for this repository
	Name *string `pulumi:"name"`
	// Configuration of the negative cache handling
	NegativeCache *NexusRepositoryYumProxyNegativeCache `pulumi:"negativeCache"`
	// Whether this repository accepts incoming requests
	Online *bool `pulumi:"online"`
	// Configuration for the proxy repository
	Proxy NexusRepositoryYumProxyProxy `pulumi:"proxy"`
	// The name of the routing rule assigned to this repository
	RoutingRule *string `pulumi:"routingRule"`
	// The storage configuration of the repository
	Storage NexusRepositoryYumProxyStorage `pulumi:"storage"`
	// Contains signing data of repositores
	YumSigning *NexusRepositoryYumProxyYumSigning `pulumi:"yumSigning"`
}

// The set of arguments for constructing a NexusRepositoryYumProxy resource.
type NexusRepositoryYumProxyArgs struct {
	// Cleanup policies
	Cleanups NexusRepositoryYumProxyCleanupArrayInput
	// HTTP Client configuration for proxy repositories. Required for docker proxy repositories
	HttpClient NexusRepositoryYumProxyHttpClientPtrInput
	// A unique identifier for this repository
	Name pulumi.StringPtrInput
	// Configuration of the negative cache handling
	NegativeCache NexusRepositoryYumProxyNegativeCachePtrInput
	// Whether this repository accepts incoming requests
	Online pulumi.BoolPtrInput
	// Configuration for the proxy repository
	Proxy NexusRepositoryYumProxyProxyInput
	// The name of the routing rule assigned to this repository
	RoutingRule pulumi.StringPtrInput
	// The storage configuration of the repository
	Storage NexusRepositoryYumProxyStorageInput
	// Contains signing data of repositores
	YumSigning NexusRepositoryYumProxyYumSigningPtrInput
}

func (NexusRepositoryYumProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusRepositoryYumProxyArgs)(nil)).Elem()
}

type NexusRepositoryYumProxyInput interface {
	pulumi.Input

	ToNexusRepositoryYumProxyOutput() NexusRepositoryYumProxyOutput
	ToNexusRepositoryYumProxyOutputWithContext(ctx context.Context) NexusRepositoryYumProxyOutput
}

func (*NexusRepositoryYumProxy) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusRepositoryYumProxy)(nil)).Elem()
}

func (i *NexusRepositoryYumProxy) ToNexusRepositoryYumProxyOutput() NexusRepositoryYumProxyOutput {
	return i.ToNexusRepositoryYumProxyOutputWithContext(context.Background())
}

func (i *NexusRepositoryYumProxy) ToNexusRepositoryYumProxyOutputWithContext(ctx context.Context) NexusRepositoryYumProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusRepositoryYumProxyOutput)
}

// NexusRepositoryYumProxyArrayInput is an input type that accepts NexusRepositoryYumProxyArray and NexusRepositoryYumProxyArrayOutput values.
// You can construct a concrete instance of `NexusRepositoryYumProxyArrayInput` via:
//
//          NexusRepositoryYumProxyArray{ NexusRepositoryYumProxyArgs{...} }
type NexusRepositoryYumProxyArrayInput interface {
	pulumi.Input

	ToNexusRepositoryYumProxyArrayOutput() NexusRepositoryYumProxyArrayOutput
	ToNexusRepositoryYumProxyArrayOutputWithContext(context.Context) NexusRepositoryYumProxyArrayOutput
}

type NexusRepositoryYumProxyArray []NexusRepositoryYumProxyInput

func (NexusRepositoryYumProxyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusRepositoryYumProxy)(nil)).Elem()
}

func (i NexusRepositoryYumProxyArray) ToNexusRepositoryYumProxyArrayOutput() NexusRepositoryYumProxyArrayOutput {
	return i.ToNexusRepositoryYumProxyArrayOutputWithContext(context.Background())
}

func (i NexusRepositoryYumProxyArray) ToNexusRepositoryYumProxyArrayOutputWithContext(ctx context.Context) NexusRepositoryYumProxyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusRepositoryYumProxyArrayOutput)
}

// NexusRepositoryYumProxyMapInput is an input type that accepts NexusRepositoryYumProxyMap and NexusRepositoryYumProxyMapOutput values.
// You can construct a concrete instance of `NexusRepositoryYumProxyMapInput` via:
//
//          NexusRepositoryYumProxyMap{ "key": NexusRepositoryYumProxyArgs{...} }
type NexusRepositoryYumProxyMapInput interface {
	pulumi.Input

	ToNexusRepositoryYumProxyMapOutput() NexusRepositoryYumProxyMapOutput
	ToNexusRepositoryYumProxyMapOutputWithContext(context.Context) NexusRepositoryYumProxyMapOutput
}

type NexusRepositoryYumProxyMap map[string]NexusRepositoryYumProxyInput

func (NexusRepositoryYumProxyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusRepositoryYumProxy)(nil)).Elem()
}

func (i NexusRepositoryYumProxyMap) ToNexusRepositoryYumProxyMapOutput() NexusRepositoryYumProxyMapOutput {
	return i.ToNexusRepositoryYumProxyMapOutputWithContext(context.Background())
}

func (i NexusRepositoryYumProxyMap) ToNexusRepositoryYumProxyMapOutputWithContext(ctx context.Context) NexusRepositoryYumProxyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusRepositoryYumProxyMapOutput)
}

type NexusRepositoryYumProxyOutput struct{ *pulumi.OutputState }

func (NexusRepositoryYumProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusRepositoryYumProxy)(nil)).Elem()
}

func (o NexusRepositoryYumProxyOutput) ToNexusRepositoryYumProxyOutput() NexusRepositoryYumProxyOutput {
	return o
}

func (o NexusRepositoryYumProxyOutput) ToNexusRepositoryYumProxyOutputWithContext(ctx context.Context) NexusRepositoryYumProxyOutput {
	return o
}

// Cleanup policies
func (o NexusRepositoryYumProxyOutput) Cleanups() NexusRepositoryYumProxyCleanupArrayOutput {
	return o.ApplyT(func(v *NexusRepositoryYumProxy) NexusRepositoryYumProxyCleanupArrayOutput { return v.Cleanups }).(NexusRepositoryYumProxyCleanupArrayOutput)
}

// HTTP Client configuration for proxy repositories. Required for docker proxy repositories
func (o NexusRepositoryYumProxyOutput) HttpClient() NexusRepositoryYumProxyHttpClientPtrOutput {
	return o.ApplyT(func(v *NexusRepositoryYumProxy) NexusRepositoryYumProxyHttpClientPtrOutput { return v.HttpClient }).(NexusRepositoryYumProxyHttpClientPtrOutput)
}

// A unique identifier for this repository
func (o NexusRepositoryYumProxyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusRepositoryYumProxy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Configuration of the negative cache handling
func (o NexusRepositoryYumProxyOutput) NegativeCache() NexusRepositoryYumProxyNegativeCachePtrOutput {
	return o.ApplyT(func(v *NexusRepositoryYumProxy) NexusRepositoryYumProxyNegativeCachePtrOutput { return v.NegativeCache }).(NexusRepositoryYumProxyNegativeCachePtrOutput)
}

// Whether this repository accepts incoming requests
func (o NexusRepositoryYumProxyOutput) Online() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NexusRepositoryYumProxy) pulumi.BoolPtrOutput { return v.Online }).(pulumi.BoolPtrOutput)
}

// Configuration for the proxy repository
func (o NexusRepositoryYumProxyOutput) Proxy() NexusRepositoryYumProxyProxyOutput {
	return o.ApplyT(func(v *NexusRepositoryYumProxy) NexusRepositoryYumProxyProxyOutput { return v.Proxy }).(NexusRepositoryYumProxyProxyOutput)
}

// The name of the routing rule assigned to this repository
func (o NexusRepositoryYumProxyOutput) RoutingRule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusRepositoryYumProxy) pulumi.StringPtrOutput { return v.RoutingRule }).(pulumi.StringPtrOutput)
}

// The storage configuration of the repository
func (o NexusRepositoryYumProxyOutput) Storage() NexusRepositoryYumProxyStorageOutput {
	return o.ApplyT(func(v *NexusRepositoryYumProxy) NexusRepositoryYumProxyStorageOutput { return v.Storage }).(NexusRepositoryYumProxyStorageOutput)
}

// Contains signing data of repositores
func (o NexusRepositoryYumProxyOutput) YumSigning() NexusRepositoryYumProxyYumSigningPtrOutput {
	return o.ApplyT(func(v *NexusRepositoryYumProxy) NexusRepositoryYumProxyYumSigningPtrOutput { return v.YumSigning }).(NexusRepositoryYumProxyYumSigningPtrOutput)
}

type NexusRepositoryYumProxyArrayOutput struct{ *pulumi.OutputState }

func (NexusRepositoryYumProxyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusRepositoryYumProxy)(nil)).Elem()
}

func (o NexusRepositoryYumProxyArrayOutput) ToNexusRepositoryYumProxyArrayOutput() NexusRepositoryYumProxyArrayOutput {
	return o
}

func (o NexusRepositoryYumProxyArrayOutput) ToNexusRepositoryYumProxyArrayOutputWithContext(ctx context.Context) NexusRepositoryYumProxyArrayOutput {
	return o
}

func (o NexusRepositoryYumProxyArrayOutput) Index(i pulumi.IntInput) NexusRepositoryYumProxyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NexusRepositoryYumProxy {
		return vs[0].([]*NexusRepositoryYumProxy)[vs[1].(int)]
	}).(NexusRepositoryYumProxyOutput)
}

type NexusRepositoryYumProxyMapOutput struct{ *pulumi.OutputState }

func (NexusRepositoryYumProxyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusRepositoryYumProxy)(nil)).Elem()
}

func (o NexusRepositoryYumProxyMapOutput) ToNexusRepositoryYumProxyMapOutput() NexusRepositoryYumProxyMapOutput {
	return o
}

func (o NexusRepositoryYumProxyMapOutput) ToNexusRepositoryYumProxyMapOutputWithContext(ctx context.Context) NexusRepositoryYumProxyMapOutput {
	return o
}

func (o NexusRepositoryYumProxyMapOutput) MapIndex(k pulumi.StringInput) NexusRepositoryYumProxyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NexusRepositoryYumProxy {
		return vs[0].(map[string]*NexusRepositoryYumProxy)[vs[1].(string)]
	}).(NexusRepositoryYumProxyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NexusRepositoryYumProxyInput)(nil)).Elem(), &NexusRepositoryYumProxy{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusRepositoryYumProxyArrayInput)(nil)).Elem(), NexusRepositoryYumProxyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusRepositoryYumProxyMapInput)(nil)).Elem(), NexusRepositoryYumProxyMap{})
	pulumi.RegisterOutputType(NexusRepositoryYumProxyOutput{})
	pulumi.RegisterOutputType(NexusRepositoryYumProxyArrayOutput{})
	pulumi.RegisterOutputType(NexusRepositoryYumProxyMapOutput{})
}
