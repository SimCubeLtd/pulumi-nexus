// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nexus

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NexusRole struct {
	pulumi.CustomResourceState

	// The description of this role.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the role.
	Name pulumi.StringOutput `pulumi:"name"`
	// The privileges of this role.
	Privileges pulumi.StringArrayOutput `pulumi:"privileges"`
	// The id of the role.
	Roleid pulumi.StringOutput `pulumi:"roleid"`
	// The roles of this role.
	Roles pulumi.StringArrayOutput `pulumi:"roles"`
}

// NewNexusRole registers a new resource with the given unique name, arguments, and options.
func NewNexusRole(ctx *pulumi.Context,
	name string, args *NexusRoleArgs, opts ...pulumi.ResourceOption) (*NexusRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Roleid == nil {
		return nil, errors.New("invalid value for required argument 'Roleid'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource NexusRole
	err := ctx.RegisterResource("nexus:index/nexusRole:NexusRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNexusRole gets an existing NexusRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNexusRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NexusRoleState, opts ...pulumi.ResourceOption) (*NexusRole, error) {
	var resource NexusRole
	err := ctx.ReadResource("nexus:index/nexusRole:NexusRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NexusRole resources.
type nexusRoleState struct {
	// The description of this role.
	Description *string `pulumi:"description"`
	// The name of the role.
	Name *string `pulumi:"name"`
	// The privileges of this role.
	Privileges []string `pulumi:"privileges"`
	// The id of the role.
	Roleid *string `pulumi:"roleid"`
	// The roles of this role.
	Roles []string `pulumi:"roles"`
}

type NexusRoleState struct {
	// The description of this role.
	Description pulumi.StringPtrInput
	// The name of the role.
	Name pulumi.StringPtrInput
	// The privileges of this role.
	Privileges pulumi.StringArrayInput
	// The id of the role.
	Roleid pulumi.StringPtrInput
	// The roles of this role.
	Roles pulumi.StringArrayInput
}

func (NexusRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusRoleState)(nil)).Elem()
}

type nexusRoleArgs struct {
	// The description of this role.
	Description *string `pulumi:"description"`
	// The name of the role.
	Name *string `pulumi:"name"`
	// The privileges of this role.
	Privileges []string `pulumi:"privileges"`
	// The id of the role.
	Roleid string `pulumi:"roleid"`
	// The roles of this role.
	Roles []string `pulumi:"roles"`
}

// The set of arguments for constructing a NexusRole resource.
type NexusRoleArgs struct {
	// The description of this role.
	Description pulumi.StringPtrInput
	// The name of the role.
	Name pulumi.StringPtrInput
	// The privileges of this role.
	Privileges pulumi.StringArrayInput
	// The id of the role.
	Roleid pulumi.StringInput
	// The roles of this role.
	Roles pulumi.StringArrayInput
}

func (NexusRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusRoleArgs)(nil)).Elem()
}

type NexusRoleInput interface {
	pulumi.Input

	ToNexusRoleOutput() NexusRoleOutput
	ToNexusRoleOutputWithContext(ctx context.Context) NexusRoleOutput
}

func (*NexusRole) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusRole)(nil)).Elem()
}

func (i *NexusRole) ToNexusRoleOutput() NexusRoleOutput {
	return i.ToNexusRoleOutputWithContext(context.Background())
}

func (i *NexusRole) ToNexusRoleOutputWithContext(ctx context.Context) NexusRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusRoleOutput)
}

// NexusRoleArrayInput is an input type that accepts NexusRoleArray and NexusRoleArrayOutput values.
// You can construct a concrete instance of `NexusRoleArrayInput` via:
//
//          NexusRoleArray{ NexusRoleArgs{...} }
type NexusRoleArrayInput interface {
	pulumi.Input

	ToNexusRoleArrayOutput() NexusRoleArrayOutput
	ToNexusRoleArrayOutputWithContext(context.Context) NexusRoleArrayOutput
}

type NexusRoleArray []NexusRoleInput

func (NexusRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusRole)(nil)).Elem()
}

func (i NexusRoleArray) ToNexusRoleArrayOutput() NexusRoleArrayOutput {
	return i.ToNexusRoleArrayOutputWithContext(context.Background())
}

func (i NexusRoleArray) ToNexusRoleArrayOutputWithContext(ctx context.Context) NexusRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusRoleArrayOutput)
}

// NexusRoleMapInput is an input type that accepts NexusRoleMap and NexusRoleMapOutput values.
// You can construct a concrete instance of `NexusRoleMapInput` via:
//
//          NexusRoleMap{ "key": NexusRoleArgs{...} }
type NexusRoleMapInput interface {
	pulumi.Input

	ToNexusRoleMapOutput() NexusRoleMapOutput
	ToNexusRoleMapOutputWithContext(context.Context) NexusRoleMapOutput
}

type NexusRoleMap map[string]NexusRoleInput

func (NexusRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusRole)(nil)).Elem()
}

func (i NexusRoleMap) ToNexusRoleMapOutput() NexusRoleMapOutput {
	return i.ToNexusRoleMapOutputWithContext(context.Background())
}

func (i NexusRoleMap) ToNexusRoleMapOutputWithContext(ctx context.Context) NexusRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusRoleMapOutput)
}

type NexusRoleOutput struct{ *pulumi.OutputState }

func (NexusRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusRole)(nil)).Elem()
}

func (o NexusRoleOutput) ToNexusRoleOutput() NexusRoleOutput {
	return o
}

func (o NexusRoleOutput) ToNexusRoleOutputWithContext(ctx context.Context) NexusRoleOutput {
	return o
}

// The description of this role.
func (o NexusRoleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusRole) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the role.
func (o NexusRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusRole) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The privileges of this role.
func (o NexusRoleOutput) Privileges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NexusRole) pulumi.StringArrayOutput { return v.Privileges }).(pulumi.StringArrayOutput)
}

// The id of the role.
func (o NexusRoleOutput) Roleid() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusRole) pulumi.StringOutput { return v.Roleid }).(pulumi.StringOutput)
}

// The roles of this role.
func (o NexusRoleOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NexusRole) pulumi.StringArrayOutput { return v.Roles }).(pulumi.StringArrayOutput)
}

type NexusRoleArrayOutput struct{ *pulumi.OutputState }

func (NexusRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusRole)(nil)).Elem()
}

func (o NexusRoleArrayOutput) ToNexusRoleArrayOutput() NexusRoleArrayOutput {
	return o
}

func (o NexusRoleArrayOutput) ToNexusRoleArrayOutputWithContext(ctx context.Context) NexusRoleArrayOutput {
	return o
}

func (o NexusRoleArrayOutput) Index(i pulumi.IntInput) NexusRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NexusRole {
		return vs[0].([]*NexusRole)[vs[1].(int)]
	}).(NexusRoleOutput)
}

type NexusRoleMapOutput struct{ *pulumi.OutputState }

func (NexusRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusRole)(nil)).Elem()
}

func (o NexusRoleMapOutput) ToNexusRoleMapOutput() NexusRoleMapOutput {
	return o
}

func (o NexusRoleMapOutput) ToNexusRoleMapOutputWithContext(ctx context.Context) NexusRoleMapOutput {
	return o
}

func (o NexusRoleMapOutput) MapIndex(k pulumi.StringInput) NexusRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NexusRole {
		return vs[0].(map[string]*NexusRole)[vs[1].(string)]
	}).(NexusRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NexusRoleInput)(nil)).Elem(), &NexusRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusRoleArrayInput)(nil)).Elem(), NexusRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusRoleMapInput)(nil)).Elem(), NexusRoleMap{})
	pulumi.RegisterOutputType(NexusRoleOutput{})
	pulumi.RegisterOutputType(NexusRoleArrayOutput{})
	pulumi.RegisterOutputType(NexusRoleMapOutput{})
}
