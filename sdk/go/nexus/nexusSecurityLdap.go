// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nexus

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NexusSecurityLdap struct {
	pulumi.CustomResourceState

	// The password to bind with. Required if authScheme other than none.
	AuthPassword pulumi.StringPtrOutput `pulumi:"authPassword"`
	// The SASL realm to bind to. Required if authScheme is CRAM_MD5 or DIGEST_MD5
	AuthRealm pulumi.StringPtrOutput `pulumi:"authRealm"`
	// Authentication scheme used for connecting to LDAP server
	AuthSchema pulumi.StringOutput `pulumi:"authSchema"`
	// This must be a fully qualified username if simple authentication is used. Required if authScheme other than none.
	AuthUsername pulumi.StringOutput `pulumi:"authUsername"`
	// How long to wait before retrying
	ConnectionRetryDelaySeconds pulumi.IntOutput `pulumi:"connectionRetryDelaySeconds"`
	// How long to wait before timeout
	ConnectionTimeoutSeconds pulumi.IntOutput `pulumi:"connectionTimeoutSeconds"`
	// The relative DN where group objects are found (e.g. ou=Group). This value will have the Search base DN value appended to
	// form the full Group search base DN.
	GroupBaseDn pulumi.StringPtrOutput `pulumi:"groupBaseDn"`
	// This field specifies the attribute of the Object class that defines the Group ID. Required if groupType is static
	GroupIdAttribute pulumi.StringPtrOutput `pulumi:"groupIdAttribute"`
	// LDAP attribute containing the usernames for the group. Required if groupType is static
	GroupMemberAttribute pulumi.StringPtrOutput `pulumi:"groupMemberAttribute"`
	// The format of user ID stored in the group member attribute. Required if groupType is static
	GroupMemberFormat pulumi.StringPtrOutput `pulumi:"groupMemberFormat"`
	// LDAP class for group objects. Required if groupType is static
	GroupObjectClass pulumi.StringPtrOutput `pulumi:"groupObjectClass"`
	// Are groups located in structures below the group base DN
	GroupSubtree pulumi.BoolPtrOutput `pulumi:"groupSubtree"`
	// Defines a type of groups used: static (a group contains a list of users) or dynamic (a user contains a list of groups).
	// Required if ldapGroupsAsRoles is true.
	GroupType pulumi.StringOutput `pulumi:"groupType"`
	// LDAP server connection hostname
	Host pulumi.StringOutput `pulumi:"host"`
	// Denotes whether LDAP assigned roles are used as Nexus Repository Manager roles
	LdapGroupsAsRoles pulumi.BoolPtrOutput `pulumi:"ldapGroupsAsRoles"`
	// How many retry attempts
	MaxIncidentCount pulumi.IntOutput `pulumi:"maxIncidentCount"`
	// LDAP server name
	Name pulumi.StringOutput `pulumi:"name"`
	// LDAP server connection port to use
	Port pulumi.IntOutput `pulumi:"port"`
	// LDAP server connection Protocol to use
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// LDAP location to be added to the connection URL
	SearchBase pulumi.StringOutput `pulumi:"searchBase"`
	// Whether to use certificates stored in Nexus Repository Manager's truststore
	UseTrustStore pulumi.BoolPtrOutput `pulumi:"useTrustStore"`
	// The relative DN where user objects are found (e.g. ou=people). This value will have the Search base DN value appended to
	// form the full User search base DN.
	UserBaseDn pulumi.StringPtrOutput `pulumi:"userBaseDn"`
	// This is used to find an email address given the user ID
	UserEmailAddressAttribute pulumi.StringPtrOutput `pulumi:"userEmailAddressAttribute"`
	// This is used to find a user given its user ID
	UserIdAttribute pulumi.StringPtrOutput `pulumi:"userIdAttribute"`
	// LDAP search filter to limit user search
	UserLdapFilter pulumi.StringPtrOutput `pulumi:"userLdapFilter"`
	// Set this to the attribute used to store the attribute which holds groups DN in the user object. Required if groupType is
	// dynamic
	UserMemberOfAttribute pulumi.StringPtrOutput `pulumi:"userMemberOfAttribute"`
	// LDAP class for user objects
	UserObjectClass pulumi.StringPtrOutput `pulumi:"userObjectClass"`
	// If this field is blank the user will be authenticated against a bind with the LDAP server
	UserPasswordAttribute pulumi.StringPtrOutput `pulumi:"userPasswordAttribute"`
	// This is used to find a real name given the user ID
	UserRealNameAttribute pulumi.StringPtrOutput `pulumi:"userRealNameAttribute"`
	// Are users located in structures below the user base DN?
	UserSubtree pulumi.BoolPtrOutput `pulumi:"userSubtree"`
}

// NewNexusSecurityLdap registers a new resource with the given unique name, arguments, and options.
func NewNexusSecurityLdap(ctx *pulumi.Context,
	name string, args *NexusSecurityLdapArgs, opts ...pulumi.ResourceOption) (*NexusSecurityLdap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthSchema == nil {
		return nil, errors.New("invalid value for required argument 'AuthSchema'")
	}
	if args.AuthUsername == nil {
		return nil, errors.New("invalid value for required argument 'AuthUsername'")
	}
	if args.ConnectionRetryDelaySeconds == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionRetryDelaySeconds'")
	}
	if args.ConnectionTimeoutSeconds == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionTimeoutSeconds'")
	}
	if args.GroupType == nil {
		return nil, errors.New("invalid value for required argument 'GroupType'")
	}
	if args.Host == nil {
		return nil, errors.New("invalid value for required argument 'Host'")
	}
	if args.MaxIncidentCount == nil {
		return nil, errors.New("invalid value for required argument 'MaxIncidentCount'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.SearchBase == nil {
		return nil, errors.New("invalid value for required argument 'SearchBase'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource NexusSecurityLdap
	err := ctx.RegisterResource("nexus:index/nexusSecurityLdap:NexusSecurityLdap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNexusSecurityLdap gets an existing NexusSecurityLdap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNexusSecurityLdap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NexusSecurityLdapState, opts ...pulumi.ResourceOption) (*NexusSecurityLdap, error) {
	var resource NexusSecurityLdap
	err := ctx.ReadResource("nexus:index/nexusSecurityLdap:NexusSecurityLdap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NexusSecurityLdap resources.
type nexusSecurityLdapState struct {
	// The password to bind with. Required if authScheme other than none.
	AuthPassword *string `pulumi:"authPassword"`
	// The SASL realm to bind to. Required if authScheme is CRAM_MD5 or DIGEST_MD5
	AuthRealm *string `pulumi:"authRealm"`
	// Authentication scheme used for connecting to LDAP server
	AuthSchema *string `pulumi:"authSchema"`
	// This must be a fully qualified username if simple authentication is used. Required if authScheme other than none.
	AuthUsername *string `pulumi:"authUsername"`
	// How long to wait before retrying
	ConnectionRetryDelaySeconds *int `pulumi:"connectionRetryDelaySeconds"`
	// How long to wait before timeout
	ConnectionTimeoutSeconds *int `pulumi:"connectionTimeoutSeconds"`
	// The relative DN where group objects are found (e.g. ou=Group). This value will have the Search base DN value appended to
	// form the full Group search base DN.
	GroupBaseDn *string `pulumi:"groupBaseDn"`
	// This field specifies the attribute of the Object class that defines the Group ID. Required if groupType is static
	GroupIdAttribute *string `pulumi:"groupIdAttribute"`
	// LDAP attribute containing the usernames for the group. Required if groupType is static
	GroupMemberAttribute *string `pulumi:"groupMemberAttribute"`
	// The format of user ID stored in the group member attribute. Required if groupType is static
	GroupMemberFormat *string `pulumi:"groupMemberFormat"`
	// LDAP class for group objects. Required if groupType is static
	GroupObjectClass *string `pulumi:"groupObjectClass"`
	// Are groups located in structures below the group base DN
	GroupSubtree *bool `pulumi:"groupSubtree"`
	// Defines a type of groups used: static (a group contains a list of users) or dynamic (a user contains a list of groups).
	// Required if ldapGroupsAsRoles is true.
	GroupType *string `pulumi:"groupType"`
	// LDAP server connection hostname
	Host *string `pulumi:"host"`
	// Denotes whether LDAP assigned roles are used as Nexus Repository Manager roles
	LdapGroupsAsRoles *bool `pulumi:"ldapGroupsAsRoles"`
	// How many retry attempts
	MaxIncidentCount *int `pulumi:"maxIncidentCount"`
	// LDAP server name
	Name *string `pulumi:"name"`
	// LDAP server connection port to use
	Port *int `pulumi:"port"`
	// LDAP server connection Protocol to use
	Protocol *string `pulumi:"protocol"`
	// LDAP location to be added to the connection URL
	SearchBase *string `pulumi:"searchBase"`
	// Whether to use certificates stored in Nexus Repository Manager's truststore
	UseTrustStore *bool `pulumi:"useTrustStore"`
	// The relative DN where user objects are found (e.g. ou=people). This value will have the Search base DN value appended to
	// form the full User search base DN.
	UserBaseDn *string `pulumi:"userBaseDn"`
	// This is used to find an email address given the user ID
	UserEmailAddressAttribute *string `pulumi:"userEmailAddressAttribute"`
	// This is used to find a user given its user ID
	UserIdAttribute *string `pulumi:"userIdAttribute"`
	// LDAP search filter to limit user search
	UserLdapFilter *string `pulumi:"userLdapFilter"`
	// Set this to the attribute used to store the attribute which holds groups DN in the user object. Required if groupType is
	// dynamic
	UserMemberOfAttribute *string `pulumi:"userMemberOfAttribute"`
	// LDAP class for user objects
	UserObjectClass *string `pulumi:"userObjectClass"`
	// If this field is blank the user will be authenticated against a bind with the LDAP server
	UserPasswordAttribute *string `pulumi:"userPasswordAttribute"`
	// This is used to find a real name given the user ID
	UserRealNameAttribute *string `pulumi:"userRealNameAttribute"`
	// Are users located in structures below the user base DN?
	UserSubtree *bool `pulumi:"userSubtree"`
}

type NexusSecurityLdapState struct {
	// The password to bind with. Required if authScheme other than none.
	AuthPassword pulumi.StringPtrInput
	// The SASL realm to bind to. Required if authScheme is CRAM_MD5 or DIGEST_MD5
	AuthRealm pulumi.StringPtrInput
	// Authentication scheme used for connecting to LDAP server
	AuthSchema pulumi.StringPtrInput
	// This must be a fully qualified username if simple authentication is used. Required if authScheme other than none.
	AuthUsername pulumi.StringPtrInput
	// How long to wait before retrying
	ConnectionRetryDelaySeconds pulumi.IntPtrInput
	// How long to wait before timeout
	ConnectionTimeoutSeconds pulumi.IntPtrInput
	// The relative DN where group objects are found (e.g. ou=Group). This value will have the Search base DN value appended to
	// form the full Group search base DN.
	GroupBaseDn pulumi.StringPtrInput
	// This field specifies the attribute of the Object class that defines the Group ID. Required if groupType is static
	GroupIdAttribute pulumi.StringPtrInput
	// LDAP attribute containing the usernames for the group. Required if groupType is static
	GroupMemberAttribute pulumi.StringPtrInput
	// The format of user ID stored in the group member attribute. Required if groupType is static
	GroupMemberFormat pulumi.StringPtrInput
	// LDAP class for group objects. Required if groupType is static
	GroupObjectClass pulumi.StringPtrInput
	// Are groups located in structures below the group base DN
	GroupSubtree pulumi.BoolPtrInput
	// Defines a type of groups used: static (a group contains a list of users) or dynamic (a user contains a list of groups).
	// Required if ldapGroupsAsRoles is true.
	GroupType pulumi.StringPtrInput
	// LDAP server connection hostname
	Host pulumi.StringPtrInput
	// Denotes whether LDAP assigned roles are used as Nexus Repository Manager roles
	LdapGroupsAsRoles pulumi.BoolPtrInput
	// How many retry attempts
	MaxIncidentCount pulumi.IntPtrInput
	// LDAP server name
	Name pulumi.StringPtrInput
	// LDAP server connection port to use
	Port pulumi.IntPtrInput
	// LDAP server connection Protocol to use
	Protocol pulumi.StringPtrInput
	// LDAP location to be added to the connection URL
	SearchBase pulumi.StringPtrInput
	// Whether to use certificates stored in Nexus Repository Manager's truststore
	UseTrustStore pulumi.BoolPtrInput
	// The relative DN where user objects are found (e.g. ou=people). This value will have the Search base DN value appended to
	// form the full User search base DN.
	UserBaseDn pulumi.StringPtrInput
	// This is used to find an email address given the user ID
	UserEmailAddressAttribute pulumi.StringPtrInput
	// This is used to find a user given its user ID
	UserIdAttribute pulumi.StringPtrInput
	// LDAP search filter to limit user search
	UserLdapFilter pulumi.StringPtrInput
	// Set this to the attribute used to store the attribute which holds groups DN in the user object. Required if groupType is
	// dynamic
	UserMemberOfAttribute pulumi.StringPtrInput
	// LDAP class for user objects
	UserObjectClass pulumi.StringPtrInput
	// If this field is blank the user will be authenticated against a bind with the LDAP server
	UserPasswordAttribute pulumi.StringPtrInput
	// This is used to find a real name given the user ID
	UserRealNameAttribute pulumi.StringPtrInput
	// Are users located in structures below the user base DN?
	UserSubtree pulumi.BoolPtrInput
}

func (NexusSecurityLdapState) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusSecurityLdapState)(nil)).Elem()
}

type nexusSecurityLdapArgs struct {
	// The password to bind with. Required if authScheme other than none.
	AuthPassword *string `pulumi:"authPassword"`
	// The SASL realm to bind to. Required if authScheme is CRAM_MD5 or DIGEST_MD5
	AuthRealm *string `pulumi:"authRealm"`
	// Authentication scheme used for connecting to LDAP server
	AuthSchema string `pulumi:"authSchema"`
	// This must be a fully qualified username if simple authentication is used. Required if authScheme other than none.
	AuthUsername string `pulumi:"authUsername"`
	// How long to wait before retrying
	ConnectionRetryDelaySeconds int `pulumi:"connectionRetryDelaySeconds"`
	// How long to wait before timeout
	ConnectionTimeoutSeconds int `pulumi:"connectionTimeoutSeconds"`
	// The relative DN where group objects are found (e.g. ou=Group). This value will have the Search base DN value appended to
	// form the full Group search base DN.
	GroupBaseDn *string `pulumi:"groupBaseDn"`
	// This field specifies the attribute of the Object class that defines the Group ID. Required if groupType is static
	GroupIdAttribute *string `pulumi:"groupIdAttribute"`
	// LDAP attribute containing the usernames for the group. Required if groupType is static
	GroupMemberAttribute *string `pulumi:"groupMemberAttribute"`
	// The format of user ID stored in the group member attribute. Required if groupType is static
	GroupMemberFormat *string `pulumi:"groupMemberFormat"`
	// LDAP class for group objects. Required if groupType is static
	GroupObjectClass *string `pulumi:"groupObjectClass"`
	// Are groups located in structures below the group base DN
	GroupSubtree *bool `pulumi:"groupSubtree"`
	// Defines a type of groups used: static (a group contains a list of users) or dynamic (a user contains a list of groups).
	// Required if ldapGroupsAsRoles is true.
	GroupType string `pulumi:"groupType"`
	// LDAP server connection hostname
	Host string `pulumi:"host"`
	// Denotes whether LDAP assigned roles are used as Nexus Repository Manager roles
	LdapGroupsAsRoles *bool `pulumi:"ldapGroupsAsRoles"`
	// How many retry attempts
	MaxIncidentCount int `pulumi:"maxIncidentCount"`
	// LDAP server name
	Name *string `pulumi:"name"`
	// LDAP server connection port to use
	Port int `pulumi:"port"`
	// LDAP server connection Protocol to use
	Protocol string `pulumi:"protocol"`
	// LDAP location to be added to the connection URL
	SearchBase string `pulumi:"searchBase"`
	// Whether to use certificates stored in Nexus Repository Manager's truststore
	UseTrustStore *bool `pulumi:"useTrustStore"`
	// The relative DN where user objects are found (e.g. ou=people). This value will have the Search base DN value appended to
	// form the full User search base DN.
	UserBaseDn *string `pulumi:"userBaseDn"`
	// This is used to find an email address given the user ID
	UserEmailAddressAttribute *string `pulumi:"userEmailAddressAttribute"`
	// This is used to find a user given its user ID
	UserIdAttribute *string `pulumi:"userIdAttribute"`
	// LDAP search filter to limit user search
	UserLdapFilter *string `pulumi:"userLdapFilter"`
	// Set this to the attribute used to store the attribute which holds groups DN in the user object. Required if groupType is
	// dynamic
	UserMemberOfAttribute *string `pulumi:"userMemberOfAttribute"`
	// LDAP class for user objects
	UserObjectClass *string `pulumi:"userObjectClass"`
	// If this field is blank the user will be authenticated against a bind with the LDAP server
	UserPasswordAttribute *string `pulumi:"userPasswordAttribute"`
	// This is used to find a real name given the user ID
	UserRealNameAttribute *string `pulumi:"userRealNameAttribute"`
	// Are users located in structures below the user base DN?
	UserSubtree *bool `pulumi:"userSubtree"`
}

// The set of arguments for constructing a NexusSecurityLdap resource.
type NexusSecurityLdapArgs struct {
	// The password to bind with. Required if authScheme other than none.
	AuthPassword pulumi.StringPtrInput
	// The SASL realm to bind to. Required if authScheme is CRAM_MD5 or DIGEST_MD5
	AuthRealm pulumi.StringPtrInput
	// Authentication scheme used for connecting to LDAP server
	AuthSchema pulumi.StringInput
	// This must be a fully qualified username if simple authentication is used. Required if authScheme other than none.
	AuthUsername pulumi.StringInput
	// How long to wait before retrying
	ConnectionRetryDelaySeconds pulumi.IntInput
	// How long to wait before timeout
	ConnectionTimeoutSeconds pulumi.IntInput
	// The relative DN where group objects are found (e.g. ou=Group). This value will have the Search base DN value appended to
	// form the full Group search base DN.
	GroupBaseDn pulumi.StringPtrInput
	// This field specifies the attribute of the Object class that defines the Group ID. Required if groupType is static
	GroupIdAttribute pulumi.StringPtrInput
	// LDAP attribute containing the usernames for the group. Required if groupType is static
	GroupMemberAttribute pulumi.StringPtrInput
	// The format of user ID stored in the group member attribute. Required if groupType is static
	GroupMemberFormat pulumi.StringPtrInput
	// LDAP class for group objects. Required if groupType is static
	GroupObjectClass pulumi.StringPtrInput
	// Are groups located in structures below the group base DN
	GroupSubtree pulumi.BoolPtrInput
	// Defines a type of groups used: static (a group contains a list of users) or dynamic (a user contains a list of groups).
	// Required if ldapGroupsAsRoles is true.
	GroupType pulumi.StringInput
	// LDAP server connection hostname
	Host pulumi.StringInput
	// Denotes whether LDAP assigned roles are used as Nexus Repository Manager roles
	LdapGroupsAsRoles pulumi.BoolPtrInput
	// How many retry attempts
	MaxIncidentCount pulumi.IntInput
	// LDAP server name
	Name pulumi.StringPtrInput
	// LDAP server connection port to use
	Port pulumi.IntInput
	// LDAP server connection Protocol to use
	Protocol pulumi.StringInput
	// LDAP location to be added to the connection URL
	SearchBase pulumi.StringInput
	// Whether to use certificates stored in Nexus Repository Manager's truststore
	UseTrustStore pulumi.BoolPtrInput
	// The relative DN where user objects are found (e.g. ou=people). This value will have the Search base DN value appended to
	// form the full User search base DN.
	UserBaseDn pulumi.StringPtrInput
	// This is used to find an email address given the user ID
	UserEmailAddressAttribute pulumi.StringPtrInput
	// This is used to find a user given its user ID
	UserIdAttribute pulumi.StringPtrInput
	// LDAP search filter to limit user search
	UserLdapFilter pulumi.StringPtrInput
	// Set this to the attribute used to store the attribute which holds groups DN in the user object. Required if groupType is
	// dynamic
	UserMemberOfAttribute pulumi.StringPtrInput
	// LDAP class for user objects
	UserObjectClass pulumi.StringPtrInput
	// If this field is blank the user will be authenticated against a bind with the LDAP server
	UserPasswordAttribute pulumi.StringPtrInput
	// This is used to find a real name given the user ID
	UserRealNameAttribute pulumi.StringPtrInput
	// Are users located in structures below the user base DN?
	UserSubtree pulumi.BoolPtrInput
}

func (NexusSecurityLdapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusSecurityLdapArgs)(nil)).Elem()
}

type NexusSecurityLdapInput interface {
	pulumi.Input

	ToNexusSecurityLdapOutput() NexusSecurityLdapOutput
	ToNexusSecurityLdapOutputWithContext(ctx context.Context) NexusSecurityLdapOutput
}

func (*NexusSecurityLdap) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusSecurityLdap)(nil)).Elem()
}

func (i *NexusSecurityLdap) ToNexusSecurityLdapOutput() NexusSecurityLdapOutput {
	return i.ToNexusSecurityLdapOutputWithContext(context.Background())
}

func (i *NexusSecurityLdap) ToNexusSecurityLdapOutputWithContext(ctx context.Context) NexusSecurityLdapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusSecurityLdapOutput)
}

// NexusSecurityLdapArrayInput is an input type that accepts NexusSecurityLdapArray and NexusSecurityLdapArrayOutput values.
// You can construct a concrete instance of `NexusSecurityLdapArrayInput` via:
//
//          NexusSecurityLdapArray{ NexusSecurityLdapArgs{...} }
type NexusSecurityLdapArrayInput interface {
	pulumi.Input

	ToNexusSecurityLdapArrayOutput() NexusSecurityLdapArrayOutput
	ToNexusSecurityLdapArrayOutputWithContext(context.Context) NexusSecurityLdapArrayOutput
}

type NexusSecurityLdapArray []NexusSecurityLdapInput

func (NexusSecurityLdapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusSecurityLdap)(nil)).Elem()
}

func (i NexusSecurityLdapArray) ToNexusSecurityLdapArrayOutput() NexusSecurityLdapArrayOutput {
	return i.ToNexusSecurityLdapArrayOutputWithContext(context.Background())
}

func (i NexusSecurityLdapArray) ToNexusSecurityLdapArrayOutputWithContext(ctx context.Context) NexusSecurityLdapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusSecurityLdapArrayOutput)
}

// NexusSecurityLdapMapInput is an input type that accepts NexusSecurityLdapMap and NexusSecurityLdapMapOutput values.
// You can construct a concrete instance of `NexusSecurityLdapMapInput` via:
//
//          NexusSecurityLdapMap{ "key": NexusSecurityLdapArgs{...} }
type NexusSecurityLdapMapInput interface {
	pulumi.Input

	ToNexusSecurityLdapMapOutput() NexusSecurityLdapMapOutput
	ToNexusSecurityLdapMapOutputWithContext(context.Context) NexusSecurityLdapMapOutput
}

type NexusSecurityLdapMap map[string]NexusSecurityLdapInput

func (NexusSecurityLdapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusSecurityLdap)(nil)).Elem()
}

func (i NexusSecurityLdapMap) ToNexusSecurityLdapMapOutput() NexusSecurityLdapMapOutput {
	return i.ToNexusSecurityLdapMapOutputWithContext(context.Background())
}

func (i NexusSecurityLdapMap) ToNexusSecurityLdapMapOutputWithContext(ctx context.Context) NexusSecurityLdapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusSecurityLdapMapOutput)
}

type NexusSecurityLdapOutput struct{ *pulumi.OutputState }

func (NexusSecurityLdapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusSecurityLdap)(nil)).Elem()
}

func (o NexusSecurityLdapOutput) ToNexusSecurityLdapOutput() NexusSecurityLdapOutput {
	return o
}

func (o NexusSecurityLdapOutput) ToNexusSecurityLdapOutputWithContext(ctx context.Context) NexusSecurityLdapOutput {
	return o
}

// The password to bind with. Required if authScheme other than none.
func (o NexusSecurityLdapOutput) AuthPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.StringPtrOutput { return v.AuthPassword }).(pulumi.StringPtrOutput)
}

// The SASL realm to bind to. Required if authScheme is CRAM_MD5 or DIGEST_MD5
func (o NexusSecurityLdapOutput) AuthRealm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.StringPtrOutput { return v.AuthRealm }).(pulumi.StringPtrOutput)
}

// Authentication scheme used for connecting to LDAP server
func (o NexusSecurityLdapOutput) AuthSchema() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.StringOutput { return v.AuthSchema }).(pulumi.StringOutput)
}

// This must be a fully qualified username if simple authentication is used. Required if authScheme other than none.
func (o NexusSecurityLdapOutput) AuthUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.StringOutput { return v.AuthUsername }).(pulumi.StringOutput)
}

// How long to wait before retrying
func (o NexusSecurityLdapOutput) ConnectionRetryDelaySeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.IntOutput { return v.ConnectionRetryDelaySeconds }).(pulumi.IntOutput)
}

// How long to wait before timeout
func (o NexusSecurityLdapOutput) ConnectionTimeoutSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.IntOutput { return v.ConnectionTimeoutSeconds }).(pulumi.IntOutput)
}

// The relative DN where group objects are found (e.g. ou=Group). This value will have the Search base DN value appended to
// form the full Group search base DN.
func (o NexusSecurityLdapOutput) GroupBaseDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.StringPtrOutput { return v.GroupBaseDn }).(pulumi.StringPtrOutput)
}

// This field specifies the attribute of the Object class that defines the Group ID. Required if groupType is static
func (o NexusSecurityLdapOutput) GroupIdAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.StringPtrOutput { return v.GroupIdAttribute }).(pulumi.StringPtrOutput)
}

// LDAP attribute containing the usernames for the group. Required if groupType is static
func (o NexusSecurityLdapOutput) GroupMemberAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.StringPtrOutput { return v.GroupMemberAttribute }).(pulumi.StringPtrOutput)
}

// The format of user ID stored in the group member attribute. Required if groupType is static
func (o NexusSecurityLdapOutput) GroupMemberFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.StringPtrOutput { return v.GroupMemberFormat }).(pulumi.StringPtrOutput)
}

// LDAP class for group objects. Required if groupType is static
func (o NexusSecurityLdapOutput) GroupObjectClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.StringPtrOutput { return v.GroupObjectClass }).(pulumi.StringPtrOutput)
}

// Are groups located in structures below the group base DN
func (o NexusSecurityLdapOutput) GroupSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.BoolPtrOutput { return v.GroupSubtree }).(pulumi.BoolPtrOutput)
}

// Defines a type of groups used: static (a group contains a list of users) or dynamic (a user contains a list of groups).
// Required if ldapGroupsAsRoles is true.
func (o NexusSecurityLdapOutput) GroupType() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.StringOutput { return v.GroupType }).(pulumi.StringOutput)
}

// LDAP server connection hostname
func (o NexusSecurityLdapOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// Denotes whether LDAP assigned roles are used as Nexus Repository Manager roles
func (o NexusSecurityLdapOutput) LdapGroupsAsRoles() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.BoolPtrOutput { return v.LdapGroupsAsRoles }).(pulumi.BoolPtrOutput)
}

// How many retry attempts
func (o NexusSecurityLdapOutput) MaxIncidentCount() pulumi.IntOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.IntOutput { return v.MaxIncidentCount }).(pulumi.IntOutput)
}

// LDAP server name
func (o NexusSecurityLdapOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// LDAP server connection port to use
func (o NexusSecurityLdapOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// LDAP server connection Protocol to use
func (o NexusSecurityLdapOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// LDAP location to be added to the connection URL
func (o NexusSecurityLdapOutput) SearchBase() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.StringOutput { return v.SearchBase }).(pulumi.StringOutput)
}

// Whether to use certificates stored in Nexus Repository Manager's truststore
func (o NexusSecurityLdapOutput) UseTrustStore() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.BoolPtrOutput { return v.UseTrustStore }).(pulumi.BoolPtrOutput)
}

// The relative DN where user objects are found (e.g. ou=people). This value will have the Search base DN value appended to
// form the full User search base DN.
func (o NexusSecurityLdapOutput) UserBaseDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.StringPtrOutput { return v.UserBaseDn }).(pulumi.StringPtrOutput)
}

// This is used to find an email address given the user ID
func (o NexusSecurityLdapOutput) UserEmailAddressAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.StringPtrOutput { return v.UserEmailAddressAttribute }).(pulumi.StringPtrOutput)
}

// This is used to find a user given its user ID
func (o NexusSecurityLdapOutput) UserIdAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.StringPtrOutput { return v.UserIdAttribute }).(pulumi.StringPtrOutput)
}

// LDAP search filter to limit user search
func (o NexusSecurityLdapOutput) UserLdapFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.StringPtrOutput { return v.UserLdapFilter }).(pulumi.StringPtrOutput)
}

// Set this to the attribute used to store the attribute which holds groups DN in the user object. Required if groupType is
// dynamic
func (o NexusSecurityLdapOutput) UserMemberOfAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.StringPtrOutput { return v.UserMemberOfAttribute }).(pulumi.StringPtrOutput)
}

// LDAP class for user objects
func (o NexusSecurityLdapOutput) UserObjectClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.StringPtrOutput { return v.UserObjectClass }).(pulumi.StringPtrOutput)
}

// If this field is blank the user will be authenticated against a bind with the LDAP server
func (o NexusSecurityLdapOutput) UserPasswordAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.StringPtrOutput { return v.UserPasswordAttribute }).(pulumi.StringPtrOutput)
}

// This is used to find a real name given the user ID
func (o NexusSecurityLdapOutput) UserRealNameAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.StringPtrOutput { return v.UserRealNameAttribute }).(pulumi.StringPtrOutput)
}

// Are users located in structures below the user base DN?
func (o NexusSecurityLdapOutput) UserSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NexusSecurityLdap) pulumi.BoolPtrOutput { return v.UserSubtree }).(pulumi.BoolPtrOutput)
}

type NexusSecurityLdapArrayOutput struct{ *pulumi.OutputState }

func (NexusSecurityLdapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusSecurityLdap)(nil)).Elem()
}

func (o NexusSecurityLdapArrayOutput) ToNexusSecurityLdapArrayOutput() NexusSecurityLdapArrayOutput {
	return o
}

func (o NexusSecurityLdapArrayOutput) ToNexusSecurityLdapArrayOutputWithContext(ctx context.Context) NexusSecurityLdapArrayOutput {
	return o
}

func (o NexusSecurityLdapArrayOutput) Index(i pulumi.IntInput) NexusSecurityLdapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NexusSecurityLdap {
		return vs[0].([]*NexusSecurityLdap)[vs[1].(int)]
	}).(NexusSecurityLdapOutput)
}

type NexusSecurityLdapMapOutput struct{ *pulumi.OutputState }

func (NexusSecurityLdapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusSecurityLdap)(nil)).Elem()
}

func (o NexusSecurityLdapMapOutput) ToNexusSecurityLdapMapOutput() NexusSecurityLdapMapOutput {
	return o
}

func (o NexusSecurityLdapMapOutput) ToNexusSecurityLdapMapOutputWithContext(ctx context.Context) NexusSecurityLdapMapOutput {
	return o
}

func (o NexusSecurityLdapMapOutput) MapIndex(k pulumi.StringInput) NexusSecurityLdapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NexusSecurityLdap {
		return vs[0].(map[string]*NexusSecurityLdap)[vs[1].(string)]
	}).(NexusSecurityLdapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NexusSecurityLdapInput)(nil)).Elem(), &NexusSecurityLdap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusSecurityLdapArrayInput)(nil)).Elem(), NexusSecurityLdapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusSecurityLdapMapInput)(nil)).Elem(), NexusSecurityLdapMap{})
	pulumi.RegisterOutputType(NexusSecurityLdapOutput{})
	pulumi.RegisterOutputType(NexusSecurityLdapArrayOutput{})
	pulumi.RegisterOutputType(NexusSecurityLdapMapOutput{})
}
