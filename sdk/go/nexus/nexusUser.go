// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nexus

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NexusUser struct {
	pulumi.CustomResourceState

	// The email address associated with the user.
	Email pulumi.StringOutput `pulumi:"email"`
	// The first name of the user.
	Firstname pulumi.StringOutput `pulumi:"firstname"`
	// The last name of the user.
	Lastname pulumi.StringOutput `pulumi:"lastname"`
	// The password for the user.
	Password pulumi.StringOutput `pulumi:"password"`
	// The roles which the user has been assigned within Nexus.
	Roles pulumi.StringArrayOutput `pulumi:"roles"`
	// The user's status, e.g. active or disabled.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// The userid which is required for login. This value cannot be changed.
	Userid pulumi.StringOutput `pulumi:"userid"`
}

// NewNexusUser registers a new resource with the given unique name, arguments, and options.
func NewNexusUser(ctx *pulumi.Context,
	name string, args *NexusUserArgs, opts ...pulumi.ResourceOption) (*NexusUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.Firstname == nil {
		return nil, errors.New("invalid value for required argument 'Firstname'")
	}
	if args.Lastname == nil {
		return nil, errors.New("invalid value for required argument 'Lastname'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Userid == nil {
		return nil, errors.New("invalid value for required argument 'Userid'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource NexusUser
	err := ctx.RegisterResource("nexus:index/nexusUser:NexusUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNexusUser gets an existing NexusUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNexusUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NexusUserState, opts ...pulumi.ResourceOption) (*NexusUser, error) {
	var resource NexusUser
	err := ctx.ReadResource("nexus:index/nexusUser:NexusUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NexusUser resources.
type nexusUserState struct {
	// The email address associated with the user.
	Email *string `pulumi:"email"`
	// The first name of the user.
	Firstname *string `pulumi:"firstname"`
	// The last name of the user.
	Lastname *string `pulumi:"lastname"`
	// The password for the user.
	Password *string `pulumi:"password"`
	// The roles which the user has been assigned within Nexus.
	Roles []string `pulumi:"roles"`
	// The user's status, e.g. active or disabled.
	Status *string `pulumi:"status"`
	// The userid which is required for login. This value cannot be changed.
	Userid *string `pulumi:"userid"`
}

type NexusUserState struct {
	// The email address associated with the user.
	Email pulumi.StringPtrInput
	// The first name of the user.
	Firstname pulumi.StringPtrInput
	// The last name of the user.
	Lastname pulumi.StringPtrInput
	// The password for the user.
	Password pulumi.StringPtrInput
	// The roles which the user has been assigned within Nexus.
	Roles pulumi.StringArrayInput
	// The user's status, e.g. active or disabled.
	Status pulumi.StringPtrInput
	// The userid which is required for login. This value cannot be changed.
	Userid pulumi.StringPtrInput
}

func (NexusUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusUserState)(nil)).Elem()
}

type nexusUserArgs struct {
	// The email address associated with the user.
	Email string `pulumi:"email"`
	// The first name of the user.
	Firstname string `pulumi:"firstname"`
	// The last name of the user.
	Lastname string `pulumi:"lastname"`
	// The password for the user.
	Password string `pulumi:"password"`
	// The roles which the user has been assigned within Nexus.
	Roles []string `pulumi:"roles"`
	// The user's status, e.g. active or disabled.
	Status *string `pulumi:"status"`
	// The userid which is required for login. This value cannot be changed.
	Userid string `pulumi:"userid"`
}

// The set of arguments for constructing a NexusUser resource.
type NexusUserArgs struct {
	// The email address associated with the user.
	Email pulumi.StringInput
	// The first name of the user.
	Firstname pulumi.StringInput
	// The last name of the user.
	Lastname pulumi.StringInput
	// The password for the user.
	Password pulumi.StringInput
	// The roles which the user has been assigned within Nexus.
	Roles pulumi.StringArrayInput
	// The user's status, e.g. active or disabled.
	Status pulumi.StringPtrInput
	// The userid which is required for login. This value cannot be changed.
	Userid pulumi.StringInput
}

func (NexusUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nexusUserArgs)(nil)).Elem()
}

type NexusUserInput interface {
	pulumi.Input

	ToNexusUserOutput() NexusUserOutput
	ToNexusUserOutputWithContext(ctx context.Context) NexusUserOutput
}

func (*NexusUser) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusUser)(nil)).Elem()
}

func (i *NexusUser) ToNexusUserOutput() NexusUserOutput {
	return i.ToNexusUserOutputWithContext(context.Background())
}

func (i *NexusUser) ToNexusUserOutputWithContext(ctx context.Context) NexusUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusUserOutput)
}

// NexusUserArrayInput is an input type that accepts NexusUserArray and NexusUserArrayOutput values.
// You can construct a concrete instance of `NexusUserArrayInput` via:
//
//          NexusUserArray{ NexusUserArgs{...} }
type NexusUserArrayInput interface {
	pulumi.Input

	ToNexusUserArrayOutput() NexusUserArrayOutput
	ToNexusUserArrayOutputWithContext(context.Context) NexusUserArrayOutput
}

type NexusUserArray []NexusUserInput

func (NexusUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusUser)(nil)).Elem()
}

func (i NexusUserArray) ToNexusUserArrayOutput() NexusUserArrayOutput {
	return i.ToNexusUserArrayOutputWithContext(context.Background())
}

func (i NexusUserArray) ToNexusUserArrayOutputWithContext(ctx context.Context) NexusUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusUserArrayOutput)
}

// NexusUserMapInput is an input type that accepts NexusUserMap and NexusUserMapOutput values.
// You can construct a concrete instance of `NexusUserMapInput` via:
//
//          NexusUserMap{ "key": NexusUserArgs{...} }
type NexusUserMapInput interface {
	pulumi.Input

	ToNexusUserMapOutput() NexusUserMapOutput
	ToNexusUserMapOutputWithContext(context.Context) NexusUserMapOutput
}

type NexusUserMap map[string]NexusUserInput

func (NexusUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusUser)(nil)).Elem()
}

func (i NexusUserMap) ToNexusUserMapOutput() NexusUserMapOutput {
	return i.ToNexusUserMapOutputWithContext(context.Background())
}

func (i NexusUserMap) ToNexusUserMapOutputWithContext(ctx context.Context) NexusUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusUserMapOutput)
}

type NexusUserOutput struct{ *pulumi.OutputState }

func (NexusUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusUser)(nil)).Elem()
}

func (o NexusUserOutput) ToNexusUserOutput() NexusUserOutput {
	return o
}

func (o NexusUserOutput) ToNexusUserOutputWithContext(ctx context.Context) NexusUserOutput {
	return o
}

// The email address associated with the user.
func (o NexusUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusUser) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// The first name of the user.
func (o NexusUserOutput) Firstname() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusUser) pulumi.StringOutput { return v.Firstname }).(pulumi.StringOutput)
}

// The last name of the user.
func (o NexusUserOutput) Lastname() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusUser) pulumi.StringOutput { return v.Lastname }).(pulumi.StringOutput)
}

// The password for the user.
func (o NexusUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The roles which the user has been assigned within Nexus.
func (o NexusUserOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NexusUser) pulumi.StringArrayOutput { return v.Roles }).(pulumi.StringArrayOutput)
}

// The user's status, e.g. active or disabled.
func (o NexusUserOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusUser) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// The userid which is required for login. This value cannot be changed.
func (o NexusUserOutput) Userid() pulumi.StringOutput {
	return o.ApplyT(func(v *NexusUser) pulumi.StringOutput { return v.Userid }).(pulumi.StringOutput)
}

type NexusUserArrayOutput struct{ *pulumi.OutputState }

func (NexusUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NexusUser)(nil)).Elem()
}

func (o NexusUserArrayOutput) ToNexusUserArrayOutput() NexusUserArrayOutput {
	return o
}

func (o NexusUserArrayOutput) ToNexusUserArrayOutputWithContext(ctx context.Context) NexusUserArrayOutput {
	return o
}

func (o NexusUserArrayOutput) Index(i pulumi.IntInput) NexusUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NexusUser {
		return vs[0].([]*NexusUser)[vs[1].(int)]
	}).(NexusUserOutput)
}

type NexusUserMapOutput struct{ *pulumi.OutputState }

func (NexusUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NexusUser)(nil)).Elem()
}

func (o NexusUserMapOutput) ToNexusUserMapOutput() NexusUserMapOutput {
	return o
}

func (o NexusUserMapOutput) ToNexusUserMapOutputWithContext(ctx context.Context) NexusUserMapOutput {
	return o
}

func (o NexusUserMapOutput) MapIndex(k pulumi.StringInput) NexusUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NexusUser {
		return vs[0].(map[string]*NexusUser)[vs[1].(string)]
	}).(NexusUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NexusUserInput)(nil)).Elem(), &NexusUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusUserArrayInput)(nil)).Elem(), NexusUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusUserMapInput)(nil)).Elem(), NexusUserMap{})
	pulumi.RegisterOutputType(NexusUserOutput{})
	pulumi.RegisterOutputType(NexusUserArrayOutput{})
	pulumi.RegisterOutputType(NexusUserMapOutput{})
}
