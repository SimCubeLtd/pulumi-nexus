// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class NexusRepository extends pulumi.CustomResource {
    /**
     * Get an existing NexusRepository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NexusRepositoryState, opts?: pulumi.CustomResourceOptions): NexusRepository {
        return new NexusRepository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nexus:index/nexusRepository:NexusRepository';

    /**
     * Returns true if the given object is an instance of NexusRepository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NexusRepository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NexusRepository.__pulumiType;
    }

    /**
     * Apt signing configuration for the repository
     */
    public readonly aptSignings!: pulumi.Output<outputs.NexusRepositoryAptSigning[] | undefined>;
    /**
     * Apt specific configuration of the repository
     */
    public readonly apts!: pulumi.Output<outputs.NexusRepositoryApt[] | undefined>;
    /**
     * Bower specific configuration of the repository
     */
    public readonly bowers!: pulumi.Output<outputs.NexusRepositoryBower[] | undefined>;
    /**
     * Cleanup policies
     */
    public readonly cleanups!: pulumi.Output<outputs.NexusRepositoryCleanup[] | undefined>;
    /**
     * Configuration for docker proxy repository
     */
    public readonly dockerProxy!: pulumi.Output<outputs.NexusRepositoryDockerProxy | undefined>;
    /**
     * Docker specific configuration of the repository
     */
    public readonly dockers!: pulumi.Output<outputs.NexusRepositoryDocker[] | undefined>;
    /**
     * Repository format. Possible values: `apt`, `bower`, `conan`, `docker`, `gitlfs`, `go`, `helm`, `maven2`, `npm`, `nuget`,
     * `p2`, `pypi`, `raw`, `rubygems`, `yum`
     */
    public readonly format!: pulumi.Output<string>;
    /**
     * Configuration for repository group
     */
    public readonly group!: pulumi.Output<outputs.NexusRepositoryGroup | undefined>;
    /**
     * HTTP Client configuration for proxy repositories. Required for docker proxy repositories.
     */
    public readonly httpClient!: pulumi.Output<outputs.NexusRepositoryHttpClient | undefined>;
    /**
     * Maven specific configuration of the repository
     */
    public readonly maven!: pulumi.Output<outputs.NexusRepositoryMaven | undefined>;
    /**
     * A unique identifier for this repository
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Configuration of the negative cache handling
     */
    public readonly negativeCache!: pulumi.Output<outputs.NexusRepositoryNegativeCache | undefined>;
    /**
     * Configuration for the nuget proxy repository
     */
    public readonly nugetProxy!: pulumi.Output<outputs.NexusRepositoryNugetProxy | undefined>;
    /**
     * Whether this repository accepts incoming requests
     */
    public readonly online!: pulumi.Output<boolean | undefined>;
    /**
     * Configuration for the proxy repository
     */
    public readonly proxy!: pulumi.Output<outputs.NexusRepositoryProxy | undefined>;
    /**
     * The storage configuration of the repository
     */
    public readonly storage!: pulumi.Output<outputs.NexusRepositoryStorage | undefined>;
    /**
     * Repository type. Possible values: `group`, `hosted`, `proxy`
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Yum specific configuration of the repository
     */
    public readonly yums!: pulumi.Output<outputs.NexusRepositoryYum[] | undefined>;

    /**
     * Create a NexusRepository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NexusRepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NexusRepositoryArgs | NexusRepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NexusRepositoryState | undefined;
            resourceInputs["aptSignings"] = state ? state.aptSignings : undefined;
            resourceInputs["apts"] = state ? state.apts : undefined;
            resourceInputs["bowers"] = state ? state.bowers : undefined;
            resourceInputs["cleanups"] = state ? state.cleanups : undefined;
            resourceInputs["dockerProxy"] = state ? state.dockerProxy : undefined;
            resourceInputs["dockers"] = state ? state.dockers : undefined;
            resourceInputs["format"] = state ? state.format : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["httpClient"] = state ? state.httpClient : undefined;
            resourceInputs["maven"] = state ? state.maven : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["negativeCache"] = state ? state.negativeCache : undefined;
            resourceInputs["nugetProxy"] = state ? state.nugetProxy : undefined;
            resourceInputs["online"] = state ? state.online : undefined;
            resourceInputs["proxy"] = state ? state.proxy : undefined;
            resourceInputs["storage"] = state ? state.storage : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["yums"] = state ? state.yums : undefined;
        } else {
            const args = argsOrState as NexusRepositoryArgs | undefined;
            if ((!args || args.format === undefined) && !opts.urn) {
                throw new Error("Missing required property 'format'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["aptSignings"] = args ? args.aptSignings : undefined;
            resourceInputs["apts"] = args ? args.apts : undefined;
            resourceInputs["bowers"] = args ? args.bowers : undefined;
            resourceInputs["cleanups"] = args ? args.cleanups : undefined;
            resourceInputs["dockerProxy"] = args ? args.dockerProxy : undefined;
            resourceInputs["dockers"] = args ? args.dockers : undefined;
            resourceInputs["format"] = args ? args.format : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["httpClient"] = args ? args.httpClient : undefined;
            resourceInputs["maven"] = args ? args.maven : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["negativeCache"] = args ? args.negativeCache : undefined;
            resourceInputs["nugetProxy"] = args ? args.nugetProxy : undefined;
            resourceInputs["online"] = args ? args.online : undefined;
            resourceInputs["proxy"] = args ? args.proxy : undefined;
            resourceInputs["storage"] = args ? args.storage : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["yums"] = args ? args.yums : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NexusRepository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NexusRepository resources.
 */
export interface NexusRepositoryState {
    /**
     * Apt signing configuration for the repository
     */
    aptSignings?: pulumi.Input<pulumi.Input<inputs.NexusRepositoryAptSigning>[]>;
    /**
     * Apt specific configuration of the repository
     */
    apts?: pulumi.Input<pulumi.Input<inputs.NexusRepositoryApt>[]>;
    /**
     * Bower specific configuration of the repository
     */
    bowers?: pulumi.Input<pulumi.Input<inputs.NexusRepositoryBower>[]>;
    /**
     * Cleanup policies
     */
    cleanups?: pulumi.Input<pulumi.Input<inputs.NexusRepositoryCleanup>[]>;
    /**
     * Configuration for docker proxy repository
     */
    dockerProxy?: pulumi.Input<inputs.NexusRepositoryDockerProxy>;
    /**
     * Docker specific configuration of the repository
     */
    dockers?: pulumi.Input<pulumi.Input<inputs.NexusRepositoryDocker>[]>;
    /**
     * Repository format. Possible values: `apt`, `bower`, `conan`, `docker`, `gitlfs`, `go`, `helm`, `maven2`, `npm`, `nuget`,
     * `p2`, `pypi`, `raw`, `rubygems`, `yum`
     */
    format?: pulumi.Input<string>;
    /**
     * Configuration for repository group
     */
    group?: pulumi.Input<inputs.NexusRepositoryGroup>;
    /**
     * HTTP Client configuration for proxy repositories. Required for docker proxy repositories.
     */
    httpClient?: pulumi.Input<inputs.NexusRepositoryHttpClient>;
    /**
     * Maven specific configuration of the repository
     */
    maven?: pulumi.Input<inputs.NexusRepositoryMaven>;
    /**
     * A unique identifier for this repository
     */
    name?: pulumi.Input<string>;
    /**
     * Configuration of the negative cache handling
     */
    negativeCache?: pulumi.Input<inputs.NexusRepositoryNegativeCache>;
    /**
     * Configuration for the nuget proxy repository
     */
    nugetProxy?: pulumi.Input<inputs.NexusRepositoryNugetProxy>;
    /**
     * Whether this repository accepts incoming requests
     */
    online?: pulumi.Input<boolean>;
    /**
     * Configuration for the proxy repository
     */
    proxy?: pulumi.Input<inputs.NexusRepositoryProxy>;
    /**
     * The storage configuration of the repository
     */
    storage?: pulumi.Input<inputs.NexusRepositoryStorage>;
    /**
     * Repository type. Possible values: `group`, `hosted`, `proxy`
     */
    type?: pulumi.Input<string>;
    /**
     * Yum specific configuration of the repository
     */
    yums?: pulumi.Input<pulumi.Input<inputs.NexusRepositoryYum>[]>;
}

/**
 * The set of arguments for constructing a NexusRepository resource.
 */
export interface NexusRepositoryArgs {
    /**
     * Apt signing configuration for the repository
     */
    aptSignings?: pulumi.Input<pulumi.Input<inputs.NexusRepositoryAptSigning>[]>;
    /**
     * Apt specific configuration of the repository
     */
    apts?: pulumi.Input<pulumi.Input<inputs.NexusRepositoryApt>[]>;
    /**
     * Bower specific configuration of the repository
     */
    bowers?: pulumi.Input<pulumi.Input<inputs.NexusRepositoryBower>[]>;
    /**
     * Cleanup policies
     */
    cleanups?: pulumi.Input<pulumi.Input<inputs.NexusRepositoryCleanup>[]>;
    /**
     * Configuration for docker proxy repository
     */
    dockerProxy?: pulumi.Input<inputs.NexusRepositoryDockerProxy>;
    /**
     * Docker specific configuration of the repository
     */
    dockers?: pulumi.Input<pulumi.Input<inputs.NexusRepositoryDocker>[]>;
    /**
     * Repository format. Possible values: `apt`, `bower`, `conan`, `docker`, `gitlfs`, `go`, `helm`, `maven2`, `npm`, `nuget`,
     * `p2`, `pypi`, `raw`, `rubygems`, `yum`
     */
    format: pulumi.Input<string>;
    /**
     * Configuration for repository group
     */
    group?: pulumi.Input<inputs.NexusRepositoryGroup>;
    /**
     * HTTP Client configuration for proxy repositories. Required for docker proxy repositories.
     */
    httpClient?: pulumi.Input<inputs.NexusRepositoryHttpClient>;
    /**
     * Maven specific configuration of the repository
     */
    maven?: pulumi.Input<inputs.NexusRepositoryMaven>;
    /**
     * A unique identifier for this repository
     */
    name?: pulumi.Input<string>;
    /**
     * Configuration of the negative cache handling
     */
    negativeCache?: pulumi.Input<inputs.NexusRepositoryNegativeCache>;
    /**
     * Configuration for the nuget proxy repository
     */
    nugetProxy?: pulumi.Input<inputs.NexusRepositoryNugetProxy>;
    /**
     * Whether this repository accepts incoming requests
     */
    online?: pulumi.Input<boolean>;
    /**
     * Configuration for the proxy repository
     */
    proxy?: pulumi.Input<inputs.NexusRepositoryProxy>;
    /**
     * The storage configuration of the repository
     */
    storage?: pulumi.Input<inputs.NexusRepositoryStorage>;
    /**
     * Repository type. Possible values: `group`, `hosted`, `proxy`
     */
    type: pulumi.Input<string>;
    /**
     * Yum specific configuration of the repository
     */
    yums?: pulumi.Input<pulumi.Input<inputs.NexusRepositoryYum>[]>;
}
